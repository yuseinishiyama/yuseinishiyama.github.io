<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>だからといって、このままでいいはずがない。</title><link href="http://yuseinishiyama.github.io/" rel="alternate"></link><link href="http://yuseinishiyama.github.io/feeds/programming-sicp.atom.xml" rel="self"></link><id>http://yuseinishiyama.github.io/</id><updated>2013-12-19T03:11:00+01:00</updated><entry><title>SICP 3.1.2 The Benefits of Introducing Assignment</title><link href="http://yuseinishiyama.github.io/posts/2013/12/19/sicp5/" rel="alternate"></link><updated>2013-12-19T03:11:00+01:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-12-19:posts/2013/12/19/sicp5/</id><summary type="html">&lt;p&gt;代入の効用について説明するだけにしては、Ex 3.5.
はちょっとやり過ぎな気もするが、なかなか興味深い内容ではある。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Monte Carlo integration is a method of estimating definite integrals
by means of Monte Carlo simulation. Consider computing the area of a
region of space described by a predicate P(x, y) that is true for
points (x, y) in the region and false for points not in the region.
For example, the region contained within a circle of radius 3 centered
at (5, 7) is described by the predicate that tests whether (x - 5)2 +
(y - 7)2\&amp;lt; 32. To estimate the area of the region described by such a
predicate, begin by choosing a rectangle that contains the region. For
example, a rectangle with diagonally opposite corners at (2, 4) and
(8, 10) contains the circle above. The desired integral is the area of
that portion of the rectangle that lies in the region. We can estimate
the integral by picking, at random, points (x,y) that lie in the
rectangle, and testing P(x, y) for each point to determine whether the
point lies in the region. If we try this with many points, then the
fraction of points that fall in the region should give an estimate of
the proportion of the rectangle that lies in the region. Hence,
multiplying this fraction by the area of the entire rectangle should
produce an estimate of the integral.&lt;/p&gt;
&lt;p&gt;Implement Monte Carlo integration as a procedure estimate-integral
that takes as arguments a predicate P, upper and lower bounds x1, x2,
y1, and y2 for the rectangle, and the number of trials to perform in
order to produce the estimate. Your procedure should use the same
monte-carlo procedure that was used above to estimate . Use your
estimate-integral to produce an estimate of by measuring the area of a
unit circle.&lt;/p&gt;
&lt;p&gt;You will find it useful to have a procedure that returns a number
chosen at random from a given range. The following random-in-range
procedure implements this in terms of the random procedure used in
section 1.2.6, which returns a nonnegative number less than its
input.8&lt;/p&gt;
&lt;p&gt;(define (random-in-range low high)&lt;br /&gt;
 (let ((range (- high low)))&lt;br /&gt;
 (+ low (random range))))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://ja.wikipedia.org/wiki/%E3%83%A2%E3%83%B3%E3%83%86%E3%82%AB%E3%83%AB%E3%83%AD%E6%B3%95" title="モンテカルロ法"&gt;モンテカルロ法&lt;/a&gt;を用いて、単位円の面積(円周率)を求める問題だ。&lt;/p&gt;
&lt;p&gt;まず、乱数生成用の函数を定義する。&lt;a href="http://sicp.g.hatena.ne.jp/hyuki/20060505/random" title="SRFI-27疑似乱数発生器インタフェース"&gt;乱数を扱うので、srfi-27を使用する&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;``` {.lang:lisp .decode:true title="Ex 3.5."}
;; ランダム数生成のため
(use srfi-27)&lt;/p&gt;
&lt;p&gt;(define (random num)
  (* (random-real) num))&lt;/p&gt;
&lt;p&gt;(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;次に、テキスト内でも使用されているモンテカルロ函数。試行回数と試行内容から、試行の成功確率を出力する。&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;lisp&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Ex 3.5.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;monte&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;carlo&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt; &lt;span class="n"&gt;experiment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;remaining&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;remaining&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;passed&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;experiment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;remaining&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;passed&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;remaining&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;そして、数値積分を行う。矩形の面積に1.0をかけているのは、単に小数で結果を見たいからだ。&lt;/p&gt;
&lt;p&gt;``` {.lang:lisp .decode:true title="Ex 3.5."}
(define (estimate-integral P x1 x2 y1 y2 trials)
  (define (rectangle-space)
    (&lt;em&gt; (- x2 x1)
       (- y2 y1)))
  (define (test)
    (P (random-in-range x1 x2) (random-in-range y1 y2)))
  (&lt;/em&gt; (* (rectangle-space) 1.0)
     (monte-carlo trials test)))&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;最後に肝心の、正方形と&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;述語としての&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;円を与える。&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;lisp&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Ex 3.5.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;estimate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;estimate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;integral&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
               &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;大体100万回ぐらいで小数点以下2桁まで等しくなった。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{.lang:lisp .decode:true title="Ex 3.5."}
;; gosh&amp;gt; (estimate-pi 10)
;; 3.6
;; gosh&amp;gt; (estimate-pi 100)
;; 3.2
;; gosh&amp;gt; (estimate-pi 1000)
;; 3.196
;; gosh&amp;gt; (estimate-pi 10000)
;; 3.1216
;; gosh&amp;gt; (estimate-pi 100000)
;; 3.13956
;; gosh&amp;gt; (estimate-pi 1000000)
;; 3.142192
;; gosh&amp;gt; (estimate-pi 1000000)
;; 3.143176&lt;/code&gt;&lt;/p&gt;</summary></entry><entry><title>SICP 第2章「Building Abstractions with Data」【後編】</title><link href="http://yuseinishiyama.github.io/posts/2013/12/08/sicp4/" rel="alternate"></link><updated>2013-12-08T23:35:00+01:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-12-08:posts/2013/12/08/sicp4/</id><summary type="html">&lt;p&gt;後半はGeneric Procedure関する解説。&lt;/p&gt;
&lt;p&gt;オブジェクト指向の言語で開発を行っていると、「そもそも型とは」というようなことを考える機会がほとんどない。言語のプリミティブな機能を利用して、型の仕組みを実装してみるのはなかなか貴重な経験だ。&lt;/p&gt;
&lt;p&gt;ここでは、Generic Procedureを実現するための戦略が3つ紹介される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;explicit dispatch  &lt;/p&gt;
&lt;p&gt;総称関数側(「たす」、「ひく」など)が、データの型(「実数」、「複素数」など)を見て、実際に実行される函数を決定する。  &lt;/p&gt;
&lt;p&gt;型が追加されるたびに、総称関数側の分岐を追加する必要がある。既存のコードを修正する必要があるので、余り得策とはいえない？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;data-directed  &lt;/p&gt;
&lt;p&gt;「総称函数名」、「型」、「実際に実行される函数」の結びつきを管理するテーブルを作成する。  &lt;/p&gt;
&lt;p&gt;総称関数内での分岐を作る必要はないが、新しい函数や型が追加されるたびにグローバルなテーブルを更新する必要がある。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;message-passing&lt;br /&gt;
    "intelligent operation"ではなく、"intelligent data
    object"。つまり、型に応じた処理を行う「賢い処理」の代わりに、処理に応じて動作を変える「賢いデータ」を作るという方針。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;message-passingは非常にオブジェクト指向的だ。直交座標系で複素数を表現する、以下の例が紹介されている。&lt;/p&gt;
&lt;p&gt;``` {.lang:lisp .decode:true title="Message Passing"}
(define (make-from-real-imag x y)
  (define (dispatch op)
    (cond ((eq? op 'real-part) x)
          ((eq? op 'imag-part) y)
          ((eq? op 'magnitude)
           (sqrt (+ (square x) (square y))))
          ((eq? op 'angle) (atan y x))
          (else
           (error "Unknown op -- MAKE-FROM-REAL-IMAG" op))))
  dispatch)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;つまり、処理の塊としての函数が返却される。&lt;/span&gt;
&lt;span class="err"&gt;利用する側は、以下の様なコードを書けば良い。&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;lisp&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Message Passing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;imag&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;imag&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;imag&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;magnitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="err"&gt;実行結果&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="n"&gt;gosh&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;2.8284271247461903&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;かなり、オブジェクトっぽい。3章ではクロージャがでてくるので、いよいよデータと手続きが一緒になったデータを定義できるようになるだろう。&lt;/p&gt;
&lt;p&gt;この後、継承などについても軽く触れていたが、この本ではクラスや継承などについて深くは扱わないようだ。もう少し理解が深まったら型システムなどもじっくり勉強してみたい。&lt;/p&gt;
&lt;p&gt;[amazonjs asin="4274069117" locale="JP" title="型システム入門
−プログラミング言語と型の理論−"]&lt;/p&gt;</summary></entry><entry><title>EmacsでSchemeの自動補完を行う。</title><link href="http://yuseinishiyama.github.io/posts/2013/12/01/emacs%e3%81%a7scheme%e3%81%ae%e8%87%aa%e5%8b%95%e8%a3%9c%e5%ae%8c%e3%82%92%e8%a1%8c%e3%81%86%e3%80%82/" rel="alternate"></link><updated>2013-12-01T23:41:00+01:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-12-01:posts/2013/12/01/emacs%e3%81%a7scheme%e3%81%ae%e8%87%aa%e5%8b%95%e8%a3%9c%e5%ae%8c%e3%82%92%e8%a1%8c%e3%81%86%e3%80%82/</id><summary type="html">&lt;p&gt;環境構築に手間をかけたくない質なので、最初はDrRacketを利用してSchemeのコードを書いていた。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.atmarkit.co.jp/ait/articles/0812/17/news149_3.html" title="Gaucheでメタプログラミング"&gt;Gaucheでメタプログラミング&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;しかし、上記のサイトなどから、Emacsでも「別ウインドウで評価しながら、ソースを書けること」が分った。&lt;br /&gt;
その結果、結局Emacs+Gaucheの環境に落ち着いた。&lt;/p&gt;
&lt;p&gt;しばらくはこれで満足していたし、新しい言語であれば、全て手で打つことも、理解を早めるという点では無駄ではないだろう。  &lt;/p&gt;
&lt;p&gt;しかし、SICPの分量・難易度を考えると、あまりゆっくりコーディングしている暇はない。さすがに、最低限の自動補完が欲しくなった。&lt;/p&gt;
&lt;p&gt;ところが、「scheme emacs
補完」とかで検索すると、結構面倒臭そうな方法が多い。  &lt;/p&gt;
&lt;p&gt;結局、emacsのパッケージ管理システムを使ってauto-completeをインストールする方法が一番楽そうだ、という結論に達した。  &lt;/p&gt;
&lt;p&gt;その方法を備忘録も兼ねて記載しておく。ちなみにEmacsのバージョンは24.2だ。&lt;/p&gt;
&lt;p&gt;まず、パッケージ管理システムを利用したことのない人はリポジトリを設定しよう。&lt;/p&gt;
&lt;p&gt;``` {.lang:lisp .decode:true title="リポジトリの設定。"}
;;;;;;;;;;;;;;;;;;;;Package;;;;;;;;;;;;;;;;;;;;&lt;/p&gt;
&lt;p&gt;(require 'package)
(add-to-list 'package-archives
         '("marmalade" . "http://marmalade-repo.org/packages/")
         '("melpa" . "http://melpa.milkbox.net/packages/"))&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;設定後は&lt;/span&gt;

&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;

&lt;span class="err"&gt;でインストール可能なパッケージの一覧が確認できる。「&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="err"&gt;」で選択し「&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="err"&gt;」でインストールの実行だ。&lt;/span&gt;  

&lt;span class="err"&gt;もちろんここでは「&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;complete&lt;/span&gt;&lt;span class="err"&gt;」をインストールする。&lt;/span&gt;&lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="err"&gt;年&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="err"&gt;月&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;日現在、最新版は&lt;/span&gt;&lt;span class="mf"&gt;1.4&lt;/span&gt;&lt;span class="err"&gt;だ。&lt;/span&gt;

&lt;span class="err"&gt;ちなみに、パッケージ管理システムでインストールした&lt;/span&gt;&lt;span class="n"&gt;elisp&lt;/span&gt;&lt;span class="err"&gt;ファイルはデフォルトで、「\&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emacs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;elpa&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;パッケージ名」内に格納される。毎回、パッケージ名のディレクトリを&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="err"&gt;として追加するのも面倒なので、&lt;/span&gt;&lt;span class="n"&gt;elpa&lt;/span&gt;&lt;span class="err"&gt;以下は自動的に&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="err"&gt;に追加されるようにしておくと便利だろう&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="err"&gt;特定のディレクトリ配下のディレクトリを&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="err"&gt;に追加する&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt;&lt;span class="err"&gt;を参考にした&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;lisp&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ロードパスの設定。&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;&lt;span class="n"&gt;LoadPath&lt;/span&gt;&lt;span class="p"&gt;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;

&lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="err"&gt;を再帰的に追加。&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defun&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dolist&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;emacs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fboundp&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;subdirs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;subdirs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;

&lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="n"&gt;elpa&lt;/span&gt;&lt;span class="err"&gt;配下をロードパスに指定。&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;elpa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;さて、肝心のSchemeを自動補完可能にする方法だが、調べるとscheme-complete.elと組み合わせる方法ばかり出てくる。&lt;br /&gt;
しかし、auto-completeの辞書ファイルが格納されているディレクトリ(
\~/.emacs.d/elpa/auto-complete-1.4/dict)には「scheme-mode」のファイルがあるので、コレを使う方法が今は一番簡単なのではないだろうか。もし、scheme-complete.elを使う利点があればどなたか教えてほしい。&lt;/p&gt;
&lt;p&gt;とりあえず今回は、デフォルトで用意されている辞書ファイルにパスを通そう。&lt;/p&gt;
&lt;p&gt;``` {.lang:lisp .decode:true title="auto-completeの設定。"}
;;;;;;;;;;;;;;;;;;;;Auto-Complete;;;;;;;;;;;;;;;;;;;;&lt;/p&gt;
&lt;p&gt;(require 'auto-complete-config)
(ac-config-default)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/elpa/auto-complete-1.4/dict")
```&lt;/p&gt;
&lt;p&gt;これらの設定を有効にし、Scheme-modeに入れば、補完がポップアップで表示されるはずだ。&lt;/p&gt;</summary></entry><entry><title>SICP 第1章「Building Abstractions with Procedures」を読み終えて。(後編)</title><link href="http://yuseinishiyama.github.io/posts/2013/10/27/sicp2/" rel="alternate"></link><updated>2013-10-27T03:50:00+01:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-10-27:posts/2013/10/27/sicp2/</id><summary type="html">&lt;p&gt;&lt;a href="http://yuseinishiyama.com/archives/184" title="SICP 第1章「Building Abstractions with Procedures」を読み終えて。(前編)"&gt;(前編はこちら)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1章から学べたことを列挙する。&lt;/p&gt;
&lt;p&gt;・Schemeに慣れた。  &lt;/p&gt;
&lt;p&gt;if、cond、define、let、lambdaなどを用いてプログラミングできるようになった。例の「カッコ」にもだいぶ慣れてきた。&lt;/p&gt;
&lt;p&gt;・linear recursionとiterationの違いが分かるようになった。  &lt;/p&gt;
&lt;p&gt;今以上に不慣れな時のコードではあるが、以下のようにrecursionとiterationで再帰が書けるようになった。後者のほうが遥かに効率が良い。&lt;/p&gt;
&lt;p&gt;``` {.lang:scheme .decode:true title="Exercise 1.11. "}
;recursion
(define (f n)
  (cond ((&amp;lt; n 3) n)
        (else (+ (f (- n 1))
                 (&lt;em&gt; 2 (f (- n 2)))
                 (&lt;/em&gt; 3 (f (- n 3)))))))&lt;/p&gt;
&lt;p&gt;;iteration
(define (f-iter product product-1 product-2 counter max-count)
  (cond ((&amp;gt; counter max-count) product)
        (else (f-iter (+ product (&lt;em&gt; 2 product-1) (&lt;/em&gt; 3 product-2)) product product-1 (+ counter 1) max-count))))
```&lt;/p&gt;
&lt;p&gt;・ファーストクラスオブジェクトについて理解した。  &lt;/p&gt;
&lt;p&gt;当然Lispをやるのだから事前に知っていたことではあったが、Procedureを返す関数とかをたくさん書いているうちに以前よりはっきり「ファーストクラス感(？)」を理解できるようになった。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In general, programming languages impose restrictions on the ways in
which computational elements can be manipulated. Elements with the
fewest restrictions are said to have first-class status. Some of the
``rights and privileges'' of first-class elements are:&lt;/p&gt;
&lt;p&gt;They may be named by variables.&lt;br /&gt;
 They may be passed as arguments to procedures.&lt;br /&gt;
 They may be returned as the results of procedures.&lt;br /&gt;
 They may be included in data structures.&lt;/p&gt;
&lt;p&gt;Lisp, unlike other common programming languages, awards procedures
full first-class status. This poses challenges for efficient
implementation, but the resulting gain in expressive power is
enormous.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;・数学的な考え方が身についた。  &lt;/p&gt;
&lt;p&gt;いや、はっきりいって数学で躓いて飛ばしてしまった問題とかもたくさんあって、むしろ数学をなんとかしないとヤバイ感じがするが、それでも前よりは数学的な考えが身についたような気がする。数学が苦手で今まで無視し続けた自分としては、これだけたくさんの近似値を求める式を実装しただけでもかなり変わったと思う。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Several of the numerical methods described in this chapter are
instances of an extremely general computational strategy known as
iterative improvement. Iterative improvement says that, to compute
something, we start with an initial guess for the answer, test if the
guess is good enough, and otherwise improve the guess and continue the
process using the improved guess as the new guess.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数学ってこういうことなんだな、とほんの少し思えた。&lt;/p&gt;
&lt;p&gt;どうせ、最初はほとんど理解できないんだろうな、と思った割には重要な点はかなり吸収できたと思う。とは言え、数学でつまずいて1/3くらいのExerciseはあいまいなままだから、なんとかしないといけない。どっちにしろ、最近3Dグラフィックスとか画像処理とか齧るようになってきて、数学の重要性を実感してきたところだし、ちょうど良いだろう。&lt;/p&gt;
&lt;p&gt;さて、次はデータの抽象化だ。&lt;/p&gt;</summary></entry><entry><title>SICP 第1章「Building Abstractions with Procedures」を読み終えて。(前編)</title><link href="http://yuseinishiyama.github.io/posts/2013/10/27/sicp1/" rel="alternate"></link><updated>2013-10-27T03:15:00+01:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-10-27:posts/2013/10/27/sicp1/</id><summary type="html">&lt;p&gt;&lt;a href="http://yuseinishiyama.com/archives/179" title="代替不可能なプログラマとは。"&gt;先日の投稿「代替不可能なプログラマとは。」&lt;/a&gt;にある通り、SICPを読み始め、先日第1章「Building
Abstractions with
Procedures」を読み終えた。実際には&lt;a href="http://yuseinishiyama.com/archives/179" title="代替不可能なプログラマとは。"&gt;先日の投稿&lt;/a&gt;より少し前から読み始めていて、1章読み終えるのに3週間ほどかかったことになる。(さらに言うと、3ヶ月ほど前に、ビデオ講義を3時間分ほど鑑賞した。この時は、テキストが存在することを知らなかったのと、当たり前だが偉大なるハル・アベルソン氏とジェラルド・ジェイ・サスマン氏の早口の英語が聞き取れるはずもなく、あえなく挫折した。)&lt;/p&gt;
&lt;p&gt;学習環境は以下。&lt;/p&gt;
&lt;p&gt;・テキストは原著で。  &lt;/p&gt;
&lt;p&gt;テキストは原著がオンラインで閲覧できるので、原著で読むことにした。日本語訳に対する酷評を聞き過ぎたせいで、理解できなかった場合に翻訳のせいにしてしまいそうだからだ。それと、語学能力の訓練にもなればと思っている。英語だけをやっている時間がないので、英語とプログラミングを一緒に効率良く学びたい。&lt;/p&gt;
&lt;p&gt;・開発環境にはDrRacketを使用。  &lt;/p&gt;
&lt;p&gt;コマンドラインとかEmacsとかも試してみたが、結局一番楽そうなものに落ち着いた。&lt;/p&gt;
&lt;p&gt;SICPを読んだ結果できるようになること、得られる知識というのははっきりしていなくて、ただただ今よりプログラミングを深く理解できるに違いないという予感だけがモチベーションになっている。SICPに関して「&lt;a href="http://www.cs.berkeley.edu/~bh/sicp.html" title="Why Structure and Interpretation of Computer Programs matters"&gt;Why
Structure and Interpretation of Computer Programs
matters&lt;/a&gt;」という記事を見つけた。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Before SICP, the first CS course was almost always entirely filled
with learning the details of some programming language. SICP is about
standing back from the details to learn big-picture ways to think
about the programming process. It focused attention on the central
idea of abstraction -- finding general patterns from specific problems
and building software tools that embody each pattern. It made heavy
use of the idea of functions as data, an idea that's hard to learn
initially, but immensely powerful once learned. (This is the same
idea, in a different form, that makes freshman calculus so notoriously
hard even for students who've done well in earlier math classes.) It
fit into the first CS course three different programming paradigms
(functional, object oriented, and declarative), when most other
courses didn't even really discuss even one paradigm.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SICPはプログラミングの"big-picture"について語っているらしく、私の予感はある程度当たっているに違いない。&lt;/p&gt;
&lt;p&gt;私の様なプログラミング新参者にとっては、日常的に利用するものはほぼすべて高度に抽象化されているのが当たり前だ。もちろん抽象化されているものを、そのインターフェースに見合った抽象化された思考によって用いることが業務では非常に重要だし、都度自分で全部作るというのはむしろ仕事ができない人間がやることだろう。だが、こういう作業をひたすらに進めていっても、「How
to Program」までにしかたどり着かず、全体像つまり「What is
Programming」を知ることは永遠にないのではないかという考えがが日増しに強くなってきた。これは道具の使い方を覚えているだけの作業ではないのか。この言語は最新版でこんなモダンな機能が追加された、このIDEではこんな便利な補完機能がある、エディタを自分好みにカスタマイズするには・・・。世の中の大半のことは道具を使うことであるはずなのに、プログラミングに関してはそれが大した意味をなさないように感じる。&lt;/p&gt;
&lt;p&gt;道具には寿命がある。例えば物理や数学という道具は寿命が長い。そうとう大きなパラダイムシフトがなければ、その基板が崩れることはないだろう。だから、その道具を使えることには普遍的価値がある。私はピアノを演奏するが、ピアノはどうだろう。ピアノとはまさに近代音楽のパラダイムそのものを体現するようなもので、こちらもかなり普遍的だ。一方で、音楽のパラダイムは大きな変化が予想され、既に音楽に対するピアノというインターフェースは以前ほど重要ではなくなっている。楽器が弾けず、楽譜も読めない人が、音楽の世界で大成功する時代だ。だから、物理や数学に比べるとやや脆いかもしれない。さて、特定のプログラミングスキルはどうだろうか。これは、先の2つの例よりはるかに寿命が短いと言わざるをえない。ツールはもちろん、言語そのものや、プログラミングのパラダイムまで短期間で移り変わる。寿命が短いものほど、覚えることが知恵というよりは知識でしかなくなっていく。&lt;/p&gt;
&lt;p&gt;とは言え、プログラミングという概念そのものの寿命は相当長いはずだ。詳細は大きく変化していったとしても、コンピュータが我々の生活を支えるという環境が変わってしまうということは、今のところ想像できない。だから、プログラミングを知っている、ということは紛れも無く知恵だろう。結局、情報が普遍的かどうかが、「知識」と「知恵」の境目である。だから、プログラミングの全体像について書かれたSICPで学べることは、知恵に違いない。ツールの使い方や、局所的なケースにやたらとこだわる人もいるし、突き詰めればそういうことも意味をなすかもしれないが、状況が変わればまた別のことを覚えなければならない。それでは技術のラットレースに飲み込まれていくだけで、体力がなくなったり、頭が硬くなったらその時点で終わりだ。使い古された「プログラマ30歳定年説」という言葉も、そういうラットレースに巻き込まれた人にとってはあながち間違いではないかもしれない。自分はそういう風になりたくない。過去の積み重ねが現在にも役立つように、自分のポートフォリオが豊かになるように、そういう風になりたい。だから、普遍的なプログラミングの本質を学びたいのだ。&lt;a href="http://yuseinishiyama.com/archives/188" title="SICP 第1章「Building Abstractions with Procedures」を読み終えて。(後編)"&gt;（後編へ続く)&lt;/a&gt;&lt;/p&gt;</summary></entry></feed>