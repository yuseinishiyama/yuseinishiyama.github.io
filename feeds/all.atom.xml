<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>だからといって、このままでいいはずがない。</title><link href="http://yuseinishiyama.github.io/" rel="alternate"></link><link href="http://yuseinishiyama.github.io/feeds/all.atom.xml" rel="self"></link><id>http://yuseinishiyama.github.io/</id><updated>2013-12-24T22:32:00+01:00</updated><entry><title>動画に対する顔検出</title><link href="http://yuseinishiyama.github.io/posts/2013/12/24/face-detection-from-movie/" rel="alternate"></link><updated>2013-12-24T22:32:00+01:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-12-24:posts/2013/12/24/face-detection-from-movie/</id><summary type="html">&lt;p&gt;(この投稿はQiitaの&lt;a href="http://qiita.com/advent-calendar/2013/ios-2"&gt;iOS Second Stage Advent Calendar
2013&lt;/a&gt;の25日目の記事です)&lt;/p&gt;
&lt;p&gt;もはや非常に一般的となった、CIDetectorによる顔検出。  &lt;/p&gt;
&lt;p&gt;ただ、よく見るサンプルはほとんどカメラの入力に対するリアルタイム検出ばかりだったので、&lt;/p&gt;
&lt;p&gt;試しに動画に対して顔を検出するサンプルを作成してみた。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/yuseinishiyama/VideoFaceDetection"&gt;https://github.com/yuseinishiyama/VideoFaceDetection&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CIDetectorとAVAssetReaderを組み合わせるだけで簡単にできる。&lt;/p&gt;
&lt;p&gt;``` {.lang:objc .decode:true title="VFDVideoFaceDetector.h"}&lt;/p&gt;
&lt;h1&gt;import &lt;Foundation/Foundation.h&gt;&lt;/h1&gt;
&lt;p&gt;typedef void(^VFDVideoReaderCompletionHandler)(NSArray *allFeatures);&lt;/p&gt;
&lt;p&gt;@interface VFDVideoFaceDetector : NSObject
- (void)readFromURL:(NSURL *)targetURL
  complitionHandler:(VFDVideoReaderCompletionHandler)completionHandler;
@end&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;objc&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;VFDVideoFaceDetector.m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#import &amp;quot;VFDVideoFaceDetector.h&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;#import &amp;lt;AVFoundation/AVFoundation.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;VFDVideoFaceDetector&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;VFDVideoReaderCompletionHandler&lt;/span&gt; &lt;span class="n"&gt;completionHandler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@end&lt;/span&gt;

&lt;span class="k"&gt;@implementation&lt;/span&gt; &lt;span class="nc"&gt;VFDVideoFaceDetector&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;AVAsset&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_asset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;CIDetector&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_detector&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;NSMutableArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_allFeatures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_allFeatures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSMutableArray&lt;/span&gt; &lt;span class="n"&gt;arrayWithCapacity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;readFromURL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSURL&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;targetURL&lt;/span&gt;
  &lt;span class="nl"&gt;complitionHandler:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VFDVideoReaderCompletionHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;completionHandler&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;completionHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;completionHandler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;_setupDetector&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;__weak&lt;/span&gt; &lt;span class="n"&gt;VFDVideoFaceDetector&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;weakSelf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;_asset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;AVAsset&lt;/span&gt; &lt;span class="n"&gt;assetWithURL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;targetURL&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_asset&lt;/span&gt; &lt;span class="n"&gt;loadValuesAsynchronouslyForKeys&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;tracks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;completionHandler&lt;/span&gt;&lt;span class="o"&gt;:^&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;weakSelf&lt;/span&gt; &lt;span class="n"&gt;_startReading&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_setupDetector&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;CIContext&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CIContext&lt;/span&gt; &lt;span class="n"&gt;contextWithOptions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;detectorOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;CIDetectorAccuracy&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CIDetectorAccuracyHigh&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="n"&gt;_detector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CIDetector&lt;/span&gt; &lt;span class="n"&gt;detectorOfType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CIDetectorTypeFace&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;detectorOptions&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_startReading&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;AVAssetReader&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;AVAssetReader&lt;/span&gt; &lt;span class="n"&gt;assetReaderWithAsset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;_asset&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;outputSettings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;kCVPixelBufferPixelFormatTypeKey&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSNumber&lt;/span&gt; &lt;span class="n"&gt;numberWithInt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;kCVPixelFormatType_32BGRA&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
    &lt;span class="n"&gt;AVAssetReaderTrackOutput&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;AVAssetReaderTrackOutput&lt;/span&gt; &lt;span class="n"&gt;assetReaderTrackOutputWithTrack&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_asset&lt;/span&gt; &lt;span class="n"&gt;tracksWithMediaType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;AVMediaTypeVideo&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                                                                                  &lt;span class="nl"&gt;outputSettings:&lt;/span&gt;&lt;span class="n"&gt;outputSettings&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="n"&gt;addOutput&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="n"&gt;startReading&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;AVAssetReaderStatusReading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;_readNextVideoFrame&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;copyNextSampleBuffer&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;_endReading&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_endReading&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_completionHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_allFeatures&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_readNextVideoFrame&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CMSampleBufferRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;sampleBuffer&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;sampleBuffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;CVPixelBufferRef&lt;/span&gt; &lt;span class="n"&gt;pixelBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CMSampleBufferGetImageBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sampleBuffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;CFDictionaryRef&lt;/span&gt; &lt;span class="n"&gt;attachments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CMCopyDictionaryOfAttachments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kCFAllocatorDefault&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sampleBuffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kCMAttachmentMode_ShouldPropagate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;CIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;convertedImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;CIImage&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;initWithCVPixelBuffer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;pixelBuffer&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__bridge&lt;/span&gt; &lt;span class="n"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;attachments&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attachments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="n"&gt;CFRelease&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attachments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;PHOTOS_EXIF_0ROW_TOP_0COL_LEFT&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//   1  =  0th row is at the top, and 0th column is on the left (THE DEFAULT).&lt;/span&gt;
        &lt;span class="n"&gt;PHOTOS_EXIF_0ROW_TOP_0COL_RIGHT&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//   2  =  0th row is at the top, and 0th column is on the right.&lt;/span&gt;
        &lt;span class="n"&gt;PHOTOS_EXIF_0ROW_BOTTOM_0COL_RIGHT&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//   3  =  0th row is at the bottom, and 0th column is on the right.&lt;/span&gt;
        &lt;span class="n"&gt;PHOTOS_EXIF_0ROW_BOTTOM_0COL_LEFT&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//   4  =  0th row is at the bottom, and 0th column is on the left.&lt;/span&gt;
        &lt;span class="n"&gt;PHOTOS_EXIF_0ROW_LEFT_0COL_TOP&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//   5  =  0th row is on the left, and 0th column is the top.&lt;/span&gt;
        &lt;span class="n"&gt;PHOTOS_EXIF_0ROW_RIGHT_0COL_TOP&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//   6  =  0th row is on the right, and 0th column is the top.&lt;/span&gt;
        &lt;span class="n"&gt;PHOTOS_EXIF_0ROW_RIGHT_0COL_BOTTOM&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//   7  =  0th row is on the right, and 0th column is the bottom.&lt;/span&gt;
        &lt;span class="n"&gt;PHOTOS_EXIF_0ROW_LEFT_0COL_BOTTOM&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="c1"&gt;//   8  =  0th row is on the left, and 0th column is the bottom.&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="n"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;CIDetectorImageOrientation&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSNumber&lt;/span&gt; &lt;span class="n"&gt;numberWithInt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;PHOTOS_EXIF_0ROW_RIGHT_0COL_TOP&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
    &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_detector&lt;/span&gt; &lt;span class="n"&gt;featuresInImage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;convertedImage&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt; &lt;span class="n"&gt;enumerateObjectsUsingBlock&lt;/span&gt;&lt;span class="o"&gt;:^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CIFaceFeature&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSUInteger&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;BOOL&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;%@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSStringFromCGRect&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;feature&lt;/span&gt; &lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
    &lt;span class="p"&gt;}];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_allFeatures&lt;/span&gt; &lt;span class="n"&gt;addObject&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;CFRelease&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sampleBuffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;AVAssetReaderから取得できるCMSampleBufferをCIImageに変換してCIDetectorに渡す。  &lt;/p&gt;
&lt;p&gt;とりあえず、Portraitの動画に対応するように、CIDetectorImageOrientationを設定している。  &lt;/p&gt;
&lt;p&gt;試しに、自分の顔が真ん中に写った動画をインカメラで撮影したもの(3秒程度)を読み込んでみた結果が以下。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{.lang:objc .decode:true title="出力"}
2013-12-24 21:41:57.503 VideoFaceDetection[9455:3e07] {{627.5, 63.75}, {565, 565}}
2013-12-24 21:41:57.771 VideoFaceDetection[9455:3e07] {{623.75, 67.5}, {567.5, 567.5}}
2013-12-24 21:41:58.049 VideoFaceDetection[9455:3e07] {{630, 87.5}, {537.5, 537.5}}
2013-12-24 21:41:58.329 VideoFaceDetection[9455:3e07] {{602.5, 76.25}, {572.5, 572.5}}
2013-12-24 21:41:58.611 VideoFaceDetection[9455:3e07] {{567.5, 68.75}, {600, 600}}
2013-12-24 21:41:58.883 VideoFaceDetection[9455:3e07] {{575, 93.75}, {570, 570}}
2013-12-24 21:41:59.158 VideoFaceDetection[9455:3e07] {{542.5, 86.25}, {595, 595}}
2013-12-24 21:41:59.443 VideoFaceDetection[9455:3e07] {{545, 125}, {552.5, 552.5}}
2013-12-24 21:41:59.725 VideoFaceDetection[9455:3e07] {{532.5, 127.5}, {570, 570}}
2013-12-24 21:42:00.013 VideoFaceDetection[9455:3e07] {{512.5, 125}, {587.5, 587.5}}
2013-12-24 21:42:00.294 VideoFaceDetection[9455:3e07] {{508.75, 132.5}, {582.5, 582.5}}
2013-12-24 21:42:00.583 VideoFaceDetection[9455:3e07] {{511.25, 130}, {575, 575}}
2013-12-24 21:42:00.866 VideoFaceDetection[9455:3e07] {{510, 118.75}, {575, 575}}
2013-12-24 21:42:01.149 VideoFaceDetection[9455:3e07] {{511.25, 112.5}, {567.5, 567.5}}
2013-12-24 21:42:01.435 VideoFaceDetection[9455:3e07] {{511.25, 110}, {570, 570}}
2013-12-24 21:42:01.725 VideoFaceDetection[9455:3e07] {{515, 112.5}, {562.5, 562.5}}
2013-12-24 21:42:02.009 VideoFaceDetection[9455:3e07] {{515, 115}, {557.5, 557.5}}
2013-12-24 21:42:02.293 VideoFaceDetection[9455:3e07] {{512.5, 118.75}, {567.5, 567.5}}
2013-12-24 21:42:02.578 VideoFaceDetection[9455:3e07] {{507.5, 112.5}, {585, 585}}
2013-12-24 21:42:02.861 VideoFaceDetection[9455:3e07] {{515, 98.75}, {585, 585}}
2013-12-24 21:42:03.133 VideoFaceDetection[9455:3e07] {{532.5, 98.75}, {585, 585}}
2013-12-24 21:42:03.400 VideoFaceDetection[9455:3e07] {{533.75, 70}, {615, 615}}
2013-12-24 21:42:03.656 VideoFaceDetection[9455:3e07] {{566.25, 46.25}, {592.5, 592.5}}
2013-12-24 21:42:03.911 VideoFaceDetection[9455:3e07] {{597.5, 26.25}, {580, 580}}
2013-12-24 21:42:04.171 VideoFaceDetection[9455:3e07] {{621.25, 23.75}, {565, 565}}
2013-12-24 21:42:04.431 VideoFaceDetection[9455:3e07] {{641.25, 32.5}, {547.5, 547.5}}
2013-12-24 21:42:04.694 VideoFaceDetection[9455:3e07] {{653.75, 43.75}, {545, 545}}
2013-12-24 21:42:04.959 VideoFaceDetection[9455:3e07] {{657.5, 56.25}, {545, 545}}
2013-12-24 21:42:05.221 VideoFaceDetection[9455:3e07] {{653.75, 62.5}, {557.5, 557.5}}
2013-12-24 21:42:05.484 VideoFaceDetection[9455:3e07] {{641.25, 66.25}, {582.5, 582.5}}
2013-12-24 21:42:05.748 VideoFaceDetection[9455:3e07] {{666.25, 97.5}, {545, 545}}
2013-12-24 21:42:06.017 VideoFaceDetection[9455:3e07] {{660, 101.25}, {555, 555}}
2013-12-24 21:42:06.282 VideoFaceDetection[9455:3e07] {{650, 108.75}, {572.5, 572.5}}
2013-12-24 21:42:06.543 VideoFaceDetection[9455:3e07] {{683.75, 95}, {552.5, 552.5}}
2013-12-24 21:42:06.797 VideoFaceDetection[9455:3e07] {{691.25, 87.5}, {545, 545}}
2013-12-24 21:42:07.062 VideoFaceDetection[9455:3e07] {{692.5, 68.75}, {540, 540}}
2013-12-24 21:42:07.327 VideoFaceDetection[9455:3e07] {{675, 52.5}, {557.5, 557.5}}
2013-12-24 21:42:07.592 VideoFaceDetection[9455:3e07] {{687.5, 57.5}, {540, 540}}
2013-12-24 21:42:07.854 VideoFaceDetection[9455:3e07] {{700, 70}, {527.5, 527.5}}
2013-12-24 21:42:08.144 VideoFaceDetection[9455:3e07] {{703.75, 87.5}, {517.5, 517.5}}
2013-12-24 21:42:08.401 VideoFaceDetection[9455:3e07] {{701.25, 87.5}, {537.5, 537.5}}
2013-12-24 21:42:08.662 VideoFaceDetection[9455:3e07] {{712.5, 93.75}, {527.5, 527.5}}
2013-12-24 21:42:08.917 VideoFaceDetection[9455:3e07] {{708.75, 102.5}, {517.5, 517.5}}
2013-12-24 21:42:09.184 VideoFaceDetection[9455:3e07] {{708.75, 115}, {510, 510}}
2013-12-24 21:42:09.440 VideoFaceDetection[9455:3e07] {{695, 111.25}, {527.5, 527.5}}
2013-12-24 21:42:09.677 VideoFaceDetection[9455:3e07] {{670, 107.5}, {552.5, 552.5}}
2013-12-24 21:42:09.935 VideoFaceDetection[9455:3e07] {{653.75, 122.5}, {562.5, 562.5}}
2013-12-24 21:42:10.198 VideoFaceDetection[9455:3e07] {{635, 146.25}, {560, 560}}
2013-12-24 21:42:11.997 VideoFaceDetection[9455:3e07] {{591.25, 117.5}, {595, 595}}
2013-12-24 21:42:12.268 VideoFaceDetection[9455:3e07] {{598.75, 111.25}, {580, 580}}
2013-12-24 21:42:12.539 VideoFaceDetection[9455:3e07] {{598.75, 98.75}, {592.5, 592.5}}
2013-12-24 21:42:12.805 VideoFaceDetection[9455:3e07] {{607.5, 106.25}, {577.5, 577.5}}
2013-12-24 21:42:13.079 VideoFaceDetection[9455:3e07] {{596.25, 110}, {590, 590}}
2013-12-24 21:42:13.354 VideoFaceDetection[9455:3e07] {{600, 105}, {595, 595}}
2013-12-24 21:42:13.623 VideoFaceDetection[9455:3e07] {{607.5, 121.25}, {582.5, 582.5}}
2013-12-24 21:42:13.896 VideoFaceDetection[9455:3e07] {{605, 121.25}, {587.5, 587.5}}
2013-12-24 21:42:14.172 VideoFaceDetection[9455:3e07] {{610, 127.5}, {575, 575}}
2013-12-24 21:42:14.438 VideoFaceDetection[9455:3e07] {{612.5, 127.5}, {582.5, 582.5}}
2013-12-24 21:42:14.708 VideoFaceDetection[9455:3e07] {{606.25, 121.25}, {587.5, 587.5}}
2013-12-24 21:42:14.977 VideoFaceDetection[9455:3e07] {{608.75, 117.5}, {592.5, 592.5}}
2013-12-24 21:42:15.246 VideoFaceDetection[9455:3e07] {{608.75, 110}, {600, 600}}
2013-12-24 21:42:15.512 VideoFaceDetection[9455:3e07] {{622.5, 113.75}, {575, 575}}
2013-12-24 21:42:15.779 VideoFaceDetection[9455:3e07] {{615, 112.5}, {585, 585}}
2013-12-24 21:42:16.050 VideoFaceDetection[9455:3e07] {{618.75, 118.75}, {580, 580}}
2013-12-24 21:42:16.316 VideoFaceDetection[9455:3e07] {{615, 115}, {585, 585}}
2013-12-24 21:42:16.584 VideoFaceDetection[9455:3e07] {{617.5, 115}, {585, 585}}
2013-12-24 21:42:16.851 VideoFaceDetection[9455:3e07] {{620, 117.5}, {582.5, 582.5}}
2013-12-24 21:42:17.119 VideoFaceDetection[9455:3e07] {{618.75, 117.5}, {580, 580}}
2013-12-24 21:42:17.394 VideoFaceDetection[9455:3e07] {{621.25, 120}, {585, 585}}
2013-12-24 21:42:17.666 VideoFaceDetection[9455:3e07] {{622.5, 126.25}, {580, 580}}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;この座標を使って、動画にアニメーションをマージしたものを作成してみたかったのだが、今回はここまで。&lt;/p&gt;</summary></entry><entry><title>SICP 3.1.2 The Benefits of Introducing Assignment</title><link href="http://yuseinishiyama.github.io/posts/2013/12/19/sicp5/" rel="alternate"></link><updated>2013-12-19T03:11:00+01:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-12-19:posts/2013/12/19/sicp5/</id><summary type="html">&lt;p&gt;代入の効用について説明するだけにしては、Ex 3.5.
はちょっとやり過ぎな気もするが、なかなか興味深い内容ではある。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Monte Carlo integration is a method of estimating definite integrals
by means of Monte Carlo simulation. Consider computing the area of a
region of space described by a predicate P(x, y) that is true for
points (x, y) in the region and false for points not in the region.
For example, the region contained within a circle of radius 3 centered
at (5, 7) is described by the predicate that tests whether (x - 5)2 +
(y - 7)2\&amp;lt; 32. To estimate the area of the region described by such a
predicate, begin by choosing a rectangle that contains the region. For
example, a rectangle with diagonally opposite corners at (2, 4) and
(8, 10) contains the circle above. The desired integral is the area of
that portion of the rectangle that lies in the region. We can estimate
the integral by picking, at random, points (x,y) that lie in the
rectangle, and testing P(x, y) for each point to determine whether the
point lies in the region. If we try this with many points, then the
fraction of points that fall in the region should give an estimate of
the proportion of the rectangle that lies in the region. Hence,
multiplying this fraction by the area of the entire rectangle should
produce an estimate of the integral.&lt;/p&gt;
&lt;p&gt;Implement Monte Carlo integration as a procedure estimate-integral
that takes as arguments a predicate P, upper and lower bounds x1, x2,
y1, and y2 for the rectangle, and the number of trials to perform in
order to produce the estimate. Your procedure should use the same
monte-carlo procedure that was used above to estimate . Use your
estimate-integral to produce an estimate of by measuring the area of a
unit circle.&lt;/p&gt;
&lt;p&gt;You will find it useful to have a procedure that returns a number
chosen at random from a given range. The following random-in-range
procedure implements this in terms of the random procedure used in
section 1.2.6, which returns a nonnegative number less than its
input.8&lt;/p&gt;
&lt;p&gt;(define (random-in-range low high)&lt;br /&gt;
 (let ((range (- high low)))&lt;br /&gt;
 (+ low (random range))))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://ja.wikipedia.org/wiki/%E3%83%A2%E3%83%B3%E3%83%86%E3%82%AB%E3%83%AB%E3%83%AD%E6%B3%95" title="モンテカルロ法"&gt;モンテカルロ法&lt;/a&gt;を用いて、単位円の面積(円周率)を求める問題だ。&lt;/p&gt;
&lt;p&gt;まず、乱数生成用の函数を定義する。&lt;a href="http://sicp.g.hatena.ne.jp/hyuki/20060505/random" title="SRFI-27疑似乱数発生器インタフェース"&gt;乱数を扱うので、srfi-27を使用する&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;``` {.lang:lisp .decode:true title="Ex 3.5."}
;; ランダム数生成のため
(use srfi-27)&lt;/p&gt;
&lt;p&gt;(define (random num)
  (* (random-real) num))&lt;/p&gt;
&lt;p&gt;(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;次に、テキスト内でも使用されているモンテカルロ函数。試行回数と試行内容から、試行の成功確率を出力する。&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;lisp&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Ex 3.5.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;monte&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;carlo&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt; &lt;span class="n"&gt;experiment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;remaining&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;remaining&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;passed&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;experiment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;remaining&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;passed&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;remaining&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;そして、数値積分を行う。矩形の面積に1.0をかけているのは、単に小数で結果を見たいからだ。&lt;/p&gt;
&lt;p&gt;``` {.lang:lisp .decode:true title="Ex 3.5."}
(define (estimate-integral P x1 x2 y1 y2 trials)
  (define (rectangle-space)
    (&lt;em&gt; (- x2 x1)
       (- y2 y1)))
  (define (test)
    (P (random-in-range x1 x2) (random-in-range y1 y2)))
  (&lt;/em&gt; (* (rectangle-space) 1.0)
     (monte-carlo trials test)))&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;最後に肝心の、正方形と&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;述語としての&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;円を与える。&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;lisp&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Ex 3.5.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;estimate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;estimate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;integral&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
               &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;大体100万回ぐらいで小数点以下2桁まで等しくなった。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{.lang:lisp .decode:true title="Ex 3.5."}
;; gosh&amp;gt; (estimate-pi 10)
;; 3.6
;; gosh&amp;gt; (estimate-pi 100)
;; 3.2
;; gosh&amp;gt; (estimate-pi 1000)
;; 3.196
;; gosh&amp;gt; (estimate-pi 10000)
;; 3.1216
;; gosh&amp;gt; (estimate-pi 100000)
;; 3.13956
;; gosh&amp;gt; (estimate-pi 1000000)
;; 3.142192
;; gosh&amp;gt; (estimate-pi 1000000)
;; 3.143176&lt;/code&gt;&lt;/p&gt;</summary></entry><entry><title>第2回potatotipsに参加してきた。</title><link href="http://yuseinishiyama.github.io/posts/2013/12/12/potatotips2/" rel="alternate"></link><updated>2013-12-12T00:54:00+01:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-12-12:posts/2013/12/12/potatotips2/</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/potatotips/potatotips/wiki/potatotips-2#potatotips-iosandroid%E9%96%8B%E7%99%BAtips%E5%85%B1%E6%9C%89%E4%BC%9A-%E7%AC%AC2%E5%9B%9E" title="potatotips (iOS/Android開発Tips共有会) 第2回"&gt;第2回potatotipsに&lt;/a&gt;参加し、発表してきた。  &lt;/p&gt;
&lt;p&gt;主にAVFoundationを利用した、iOSでの動画編集の話をした。使用したスライドは以下のものである。&lt;/p&gt;
&lt;p&gt;[slideshare id=29084610&amp;amp;doc=potatotips2-131210141939-phpapp02]&lt;/p&gt;
&lt;p&gt;噂通りのハイレベルさで、1人持ち時間5分という短さながらも、濃い内容の発表ばかりであった。&lt;br /&gt;
特に珍しい意見でもないと思うが、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;調べたらすぐに発見できるわけではないが、&lt;/li&gt;
&lt;li&gt;かといってニッチすぎず、普段の業務に活かせて、&lt;/li&gt;
&lt;li&gt;しかも、ユーモアがあって面白い内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらが揃うと、「良い発表」だったなと感じる。&lt;br /&gt;
とはいえ、普通は1つ満たすだけでも難しい。  &lt;/p&gt;
&lt;p&gt;それぞれのトレードオフもあるので、全部揃えるとなると、これは並大抵のことではない。&lt;/p&gt;
&lt;p&gt;まだまだ、先は長い。&lt;/p&gt;</summary></entry><entry><title>SICP 第2章「Building Abstractions with Data」【後編】</title><link href="http://yuseinishiyama.github.io/posts/2013/12/08/sicp4/" rel="alternate"></link><updated>2013-12-08T23:35:00+01:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-12-08:posts/2013/12/08/sicp4/</id><summary type="html">&lt;p&gt;後半はGeneric Procedure関する解説。&lt;/p&gt;
&lt;p&gt;オブジェクト指向の言語で開発を行っていると、「そもそも型とは」というようなことを考える機会がほとんどない。言語のプリミティブな機能を利用して、型の仕組みを実装してみるのはなかなか貴重な経験だ。&lt;/p&gt;
&lt;p&gt;ここでは、Generic Procedureを実現するための戦略が3つ紹介される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;explicit dispatch  &lt;/p&gt;
&lt;p&gt;総称関数側(「たす」、「ひく」など)が、データの型(「実数」、「複素数」など)を見て、実際に実行される函数を決定する。  &lt;/p&gt;
&lt;p&gt;型が追加されるたびに、総称関数側の分岐を追加する必要がある。既存のコードを修正する必要があるので、余り得策とはいえない？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;data-directed  &lt;/p&gt;
&lt;p&gt;「総称函数名」、「型」、「実際に実行される函数」の結びつきを管理するテーブルを作成する。  &lt;/p&gt;
&lt;p&gt;総称関数内での分岐を作る必要はないが、新しい函数や型が追加されるたびにグローバルなテーブルを更新する必要がある。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;message-passing&lt;br /&gt;
    "intelligent operation"ではなく、"intelligent data
    object"。つまり、型に応じた処理を行う「賢い処理」の代わりに、処理に応じて動作を変える「賢いデータ」を作るという方針。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;message-passingは非常にオブジェクト指向的だ。直交座標系で複素数を表現する、以下の例が紹介されている。&lt;/p&gt;
&lt;p&gt;``` {.lang:lisp .decode:true title="Message Passing"}
(define (make-from-real-imag x y)
  (define (dispatch op)
    (cond ((eq? op 'real-part) x)
          ((eq? op 'imag-part) y)
          ((eq? op 'magnitude)
           (sqrt (+ (square x) (square y))))
          ((eq? op 'angle) (atan y x))
          (else
           (error "Unknown op -- MAKE-FROM-REAL-IMAG" op))))
  dispatch)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;つまり、処理の塊としての函数が返却される。&lt;/span&gt;
&lt;span class="err"&gt;利用する側は、以下の様なコードを書けば良い。&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;lisp&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Message Passing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;imag&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;imag&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;imag&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;magnitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="err"&gt;実行結果&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="n"&gt;gosh&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;2.8284271247461903&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;かなり、オブジェクトっぽい。3章ではクロージャがでてくるので、いよいよデータと手続きが一緒になったデータを定義できるようになるだろう。&lt;/p&gt;
&lt;p&gt;この後、継承などについても軽く触れていたが、この本ではクラスや継承などについて深くは扱わないようだ。もう少し理解が深まったら型システムなどもじっくり勉強してみたい。&lt;/p&gt;
&lt;p&gt;[amazonjs asin="4274069117" locale="JP" title="型システム入門
−プログラミング言語と型の理論−"]&lt;/p&gt;</summary></entry><entry><title>EmacsでSchemeの自動補完を行う。</title><link href="http://yuseinishiyama.github.io/posts/2013/12/01/emacs%e3%81%a7scheme%e3%81%ae%e8%87%aa%e5%8b%95%e8%a3%9c%e5%ae%8c%e3%82%92%e8%a1%8c%e3%81%86%e3%80%82/" rel="alternate"></link><updated>2013-12-01T23:41:00+01:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-12-01:posts/2013/12/01/emacs%e3%81%a7scheme%e3%81%ae%e8%87%aa%e5%8b%95%e8%a3%9c%e5%ae%8c%e3%82%92%e8%a1%8c%e3%81%86%e3%80%82/</id><summary type="html">&lt;p&gt;環境構築に手間をかけたくない質なので、最初はDrRacketを利用してSchemeのコードを書いていた。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.atmarkit.co.jp/ait/articles/0812/17/news149_3.html" title="Gaucheでメタプログラミング"&gt;Gaucheでメタプログラミング&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;しかし、上記のサイトなどから、Emacsでも「別ウインドウで評価しながら、ソースを書けること」が分った。&lt;br /&gt;
その結果、結局Emacs+Gaucheの環境に落ち着いた。&lt;/p&gt;
&lt;p&gt;しばらくはこれで満足していたし、新しい言語であれば、全て手で打つことも、理解を早めるという点では無駄ではないだろう。  &lt;/p&gt;
&lt;p&gt;しかし、SICPの分量・難易度を考えると、あまりゆっくりコーディングしている暇はない。さすがに、最低限の自動補完が欲しくなった。&lt;/p&gt;
&lt;p&gt;ところが、「scheme emacs
補完」とかで検索すると、結構面倒臭そうな方法が多い。  &lt;/p&gt;
&lt;p&gt;結局、emacsのパッケージ管理システムを使ってauto-completeをインストールする方法が一番楽そうだ、という結論に達した。  &lt;/p&gt;
&lt;p&gt;その方法を備忘録も兼ねて記載しておく。ちなみにEmacsのバージョンは24.2だ。&lt;/p&gt;
&lt;p&gt;まず、パッケージ管理システムを利用したことのない人はリポジトリを設定しよう。&lt;/p&gt;
&lt;p&gt;``` {.lang:lisp .decode:true title="リポジトリの設定。"}
;;;;;;;;;;;;;;;;;;;;Package;;;;;;;;;;;;;;;;;;;;&lt;/p&gt;
&lt;p&gt;(require 'package)
(add-to-list 'package-archives
         '("marmalade" . "http://marmalade-repo.org/packages/")
         '("melpa" . "http://melpa.milkbox.net/packages/"))&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;設定後は&lt;/span&gt;

&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;

&lt;span class="err"&gt;でインストール可能なパッケージの一覧が確認できる。「&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="err"&gt;」で選択し「&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="err"&gt;」でインストールの実行だ。&lt;/span&gt;  

&lt;span class="err"&gt;もちろんここでは「&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;complete&lt;/span&gt;&lt;span class="err"&gt;」をインストールする。&lt;/span&gt;&lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="err"&gt;年&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="err"&gt;月&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;日現在、最新版は&lt;/span&gt;&lt;span class="mf"&gt;1.4&lt;/span&gt;&lt;span class="err"&gt;だ。&lt;/span&gt;

&lt;span class="err"&gt;ちなみに、パッケージ管理システムでインストールした&lt;/span&gt;&lt;span class="n"&gt;elisp&lt;/span&gt;&lt;span class="err"&gt;ファイルはデフォルトで、「\&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emacs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;elpa&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;パッケージ名」内に格納される。毎回、パッケージ名のディレクトリを&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="err"&gt;として追加するのも面倒なので、&lt;/span&gt;&lt;span class="n"&gt;elpa&lt;/span&gt;&lt;span class="err"&gt;以下は自動的に&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="err"&gt;に追加されるようにしておくと便利だろう&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="err"&gt;特定のディレクトリ配下のディレクトリを&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="err"&gt;に追加する&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt;&lt;span class="err"&gt;を参考にした&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;lisp&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ロードパスの設定。&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;&lt;span class="n"&gt;LoadPath&lt;/span&gt;&lt;span class="p"&gt;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;

&lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="err"&gt;を再帰的に追加。&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defun&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dolist&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;emacs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fboundp&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;subdirs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;subdirs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;

&lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="n"&gt;elpa&lt;/span&gt;&lt;span class="err"&gt;配下をロードパスに指定。&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;elpa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;さて、肝心のSchemeを自動補完可能にする方法だが、調べるとscheme-complete.elと組み合わせる方法ばかり出てくる。&lt;br /&gt;
しかし、auto-completeの辞書ファイルが格納されているディレクトリ(
\~/.emacs.d/elpa/auto-complete-1.4/dict)には「scheme-mode」のファイルがあるので、コレを使う方法が今は一番簡単なのではないだろうか。もし、scheme-complete.elを使う利点があればどなたか教えてほしい。&lt;/p&gt;
&lt;p&gt;とりあえず今回は、デフォルトで用意されている辞書ファイルにパスを通そう。&lt;/p&gt;
&lt;p&gt;``` {.lang:lisp .decode:true title="auto-completeの設定。"}
;;;;;;;;;;;;;;;;;;;;Auto-Complete;;;;;;;;;;;;;;;;;;;;&lt;/p&gt;
&lt;p&gt;(require 'auto-complete-config)
(ac-config-default)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/elpa/auto-complete-1.4/dict")
```&lt;/p&gt;
&lt;p&gt;これらの設定を有効にし、Scheme-modeに入れば、補完がポップアップで表示されるはずだ。&lt;/p&gt;</summary></entry><entry><title>SICP 第2章「Building Abstractions with Data」【前編】</title><link href="http://yuseinishiyama.github.io/posts/2013/11/25/sicp3/" rel="alternate"></link><updated>2013-11-25T04:18:00+01:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-11-25:posts/2013/11/25/sicp3/</id><summary type="html">&lt;p&gt;1章が割りとすんなり終わったものだから、少し油断していた。2章からは分量も問題数も随分多くなりなかなか終わりそうにない。大体2章の60%ぐらいが終わったから、備忘録も兼ねてこの辺りで感想をまとめておこう。&lt;/p&gt;
&lt;p&gt;ところで、Edsgar Dijkstraの言葉にこのようなものがある&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Being abstract is something profoundly different from being vague…&lt;br /&gt;
 The purpose of abstraction is not to be vague, but to create a new
semantic level in which one can be absolutely precise.   (&lt;a href="http://www.linfo.org/q_programming.html" title="Best Programming Quotations"&gt;「Best
Programming Quotations」&lt;/a&gt;より)&lt;/p&gt;
&lt;p&gt;抽象的であることと曖昧であることは全く違う。&lt;br /&gt;
 抽象化の目的は、曖昧にすることではない。&lt;br /&gt;
 抽象化は、新たなセマンティックレベルを創出し、&lt;br /&gt;
 そのレベルにおいて人は非常に正確で有り得る。(拙訳)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(ここでいうセマンティックレベルとは、抽象化の結果生まれる新しいレイヤーのことであろう。SICPではAbstraction
Barrierという言葉で述べられている概念だ。)&lt;/p&gt;
&lt;p&gt;プログラミングをはじめた頃は、自分の頭の悪さを度々嘆いたものだ。特に深い再帰処理では、すぐにコールスタックを追うことができなくなる。こういうとき、自分のメモリがプログラミングをするには少なすぎる、そういう風に考えてしまうことが多かった。&lt;/p&gt;
&lt;p&gt;だが、SICPをやり始めて一番身に沁みたことは、「抽象化&gt;記憶力」であるということだ。難しい問題を抽象化し、抽象化した部分をどんどんとモジュール化していけば、記憶力が良くなくても問題が解ける。つまり、モジュールの動作が保証されているのであれば、全体が把握しきれなくても良いのである。これは当然、単体テスト・自動テストなどが有用であることの理由にもなり得る。こんなことは当たり前かと思うかもしれない。しかし、いざやってみると、抽象化能力が不十分であることが露呈する。少なくとも私の場合はそうだった。&lt;/p&gt;
&lt;p&gt;例えば、&lt;/p&gt;
&lt;p&gt;listの長さを求める函数(length)&lt;br /&gt;
list同士を連結する函数(append)&lt;br /&gt;
listの全要素に任意の処理を行う函数(map)&lt;/p&gt;
&lt;p&gt;を実装するとして、list構造に慣れていなければappendぐらいでも結構混乱してしまうものだ。だがそれは、これら3つ処理に共通する処理、つまり抽象化可能な処理が見えていないということに他ならない。その抽象化されるべき処理とは&lt;/p&gt;
&lt;p&gt;「先頭の要素」と、「後述の要素に再帰的処理を行ったもの」との間の演算&lt;/p&gt;
&lt;p&gt;である。この抽象化を実装すると、&lt;/p&gt;
&lt;p&gt;``` {.lang:scheme .decode:true title="accumulate"}
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;というようになるわけだ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;それにしても、高次の概念であるほど、英語で名前をつけるのが難しい。この処理に&lt;/span&gt;&lt;span class="nx"&gt;accumulate&lt;/span&gt;&lt;span class="err"&gt;という動詞を当て嵌めることは今の英語能力では到底出来ない…&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;。そして、これを用いれば、簡単に上記&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;つの問題に対処できるということが&lt;/span&gt;&lt;span class="nx"&gt;Ex&lt;/span&gt;
&lt;span class="mf"&gt;2.33&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;によって示される。&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;scheme&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="nx"&gt;Exercise&lt;/span&gt; &lt;span class="mf"&gt;2.33&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="nx"&gt;Fill&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;missing&lt;/span&gt; &lt;span class="nx"&gt;expressions&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;complete&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;following&lt;/span&gt; &lt;span class="nx"&gt;definitions&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt; &lt;span class="nx"&gt;basic&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;manipulation&lt;/span&gt; &lt;span class="nx"&gt;operations&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;accumulations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accumulate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;??&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;nil&lt;/span&gt; &lt;span class="nx"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt; &lt;span class="nx"&gt;seq1&lt;/span&gt; &lt;span class="nx"&gt;seq2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accumulate&lt;/span&gt; &lt;span class="nx"&gt;cons&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;??&amp;gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;??&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="nx"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accumulate&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;??&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;sequences&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accumulate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cons&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;() sequences))&lt;/span&gt;
&lt;span class="s1"&gt;(define (append seq1 seq2)&lt;/span&gt;
&lt;span class="s1"&gt;  (accumulate cons (accumulate cons &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;seq2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;seq1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="nx"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accumulate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ところで、記憶力の補完物として抽象化があるということは、プログラミング以外でも変わらない(人間の記憶力の弱さは、&lt;a href="http://ja.wikipedia.org/wiki/%E3%82%B8%E3%83%A7%E3%83%BC%E3%82%B8%E3%83%BB%E3%83%9F%E3%83%A9%E3%83%BC" title="ジョージ・ミラー"&gt;ジョージ・ミラーのマジカルナンバー&lt;/a&gt;を考えれば明らかだ)。&lt;/p&gt;
&lt;p&gt;例えば、「1ヶ月で300ページの本を読む」という目標は「昨日読んだ最後のページから10ページ読むことを1ヶ月間続ける」ということであるし、あらゆる目標の究極的な抽象化は「過去より現在のほうが進んでいる」ということである。そういう意味で、自己管理指標は、過去と現在の短い差分で計れるべきものでなくてはならない。&lt;/p&gt;
&lt;p&gt;複雑な処理を抽象化し分解することで、対処すべき問題が明確になる。そういう意味でDijkstraは「precise」になれると言っているのであろう。人生も同じで、時に全体を見渡す必要があるが、「近視眼になれる仕組み作り」がなにより重要なのではないだろうか。&lt;/p&gt;</summary></entry><entry><title>第7回テックヒルズにいってきました。</title><link href="http://yuseinishiyama.github.io/posts/2013/11/13/tech-hills7/" rel="alternate"></link><updated>2013-11-13T02:27:00+01:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-11-13:posts/2013/11/13/tech-hills7/</id><summary type="html">&lt;p&gt;Unityを触ったり、簡単なシェーダー書いたりしてるうちに描画処理への関心が高まってきた。ゲームとかグラフィックスの分野は、一定以上のものを作るために比較的コアな知識がいる一方で、結果がキャッチーで分かりやすい。ゲームにはあまり興味がない私だが、ゲームエンジンブームである。先日、&lt;a href="http://d.hatena.ne.jp/hdk_embedded/20131106/1383681073"&gt;「Playgroundハッカソン」&lt;/a&gt;に参加してからというもの、ますます興味が湧いてきている。&lt;/p&gt;
&lt;p&gt;そんなわけで、「Game
Engines」がテーマの&lt;a href="http://atnd.org/events/44622" title="第7回テックヒルズ"&gt;第7回テックヒルズ&lt;/a&gt;に行ってきた。&lt;/p&gt;
&lt;p&gt;以下が公開されているスライドへのリンクだ(一部、公開が確認できていないものもある)。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/keigoando/unity2-dnew-gui" title="Unity2DとnewGUIについて"&gt;「Unity2DとnewGUIについて」&lt;/a&gt;安藤
    圭吾さん(ユニティ・テクノロジーズ・ジャパン)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/KatsutoshiMakino/aiming" title="Aiming開発ゲームの裏側"&gt;「Aiming開発ゲームの裏側」&lt;/a&gt;牧野 克俊さん(Aiming)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/doraemonsss/cocos2d-x-28145813?ref=http://sssslide.com/www.slideshare.net/doraemonsss/cocos2d-x-28145813" title="cocos2d-xおよび開発ツールについて"&gt;「cocos2d-xおよび開発ツールについて」&lt;/a&gt;清水 友晶さん(TKS2)&lt;/li&gt;
&lt;li&gt;「 enchant.jsの野望 9分コーディングライブ」 清水
    亮さん(ユビキタスエンターテインメント)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/KeiNakazawa/131112-tech-hills-playground-introduction" title="Introduction"&gt;「イントロダクション」&lt;/a&gt;
    &amp;amp;&lt;a href="http://www.slideshare.net/RomainPiquois/playground-28101668" title="Playground内の描画仕組み"&gt;「Playgroundの描画仕組み」&lt;/a&gt;＆&lt;a href="http://www.slideshare.net/KeiNakazawa/playgroundandroid-pfandroid" title="&amp;quot;Playground&amp;quot;とAndroid"&gt;「マルチPF対応ゲームエンジン内のAndroid対応」&lt;/a&gt;ロマン・ピコアさん(KLab)
    ・中澤 慧さん(KLab)&lt;/li&gt;
&lt;li&gt;「次世代ゲームエンジンの比較」浦田 祐輝さん(CROOZ)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;内容をまとめようかと思ったが、とりあえずはEmacsのorg-modeで殴り書き(殴り打ち?)したメモを貼っておく。&lt;/p&gt;
&lt;p&gt;* 2013年11月12日 第７回テックヒルズ&lt;/p&gt;
&lt;p&gt;** オープニングトーク&lt;br /&gt;
*** What is Techhills&lt;/p&gt;
&lt;p&gt;** 「Unity2DとnewGUIについて」安藤
圭吾さん(ユニティ・テクノロジーズ・ジャパン)&lt;br /&gt;
*** Unity4.3&lt;br /&gt;
**** 今週から来週に公開。&lt;br /&gt;
**** 日本語リリースノートはもう少し先。&lt;br /&gt;
*** Unity2D&lt;br /&gt;
**** New 2D Workflows&lt;br /&gt;
**** 2D Platformer&lt;br /&gt;
**** 2D Tool Kit&lt;br /&gt;
**** 物理エンジン「Box2D」&lt;br /&gt;
**** Rigidbody2D&lt;br /&gt;
**** コライダー&lt;br /&gt;
**** 3Dと同時に使用できるが、互いに影響しない。&lt;br /&gt;
**** SpriteEditor、TexturePacker完備。&lt;br /&gt;
**** Spriteのアニメーション。&lt;br /&gt;
**** アニメーションイベント、状態遷移も利用可能。&lt;br /&gt;
**** 自動でバッチングされる。&lt;br /&gt;
**** メカニムも利用できる。&lt;br /&gt;
*** まとめ&lt;br /&gt;
**** Box2D&lt;br /&gt;
**** Sprite&lt;br /&gt;
****
現在のフレームワークが2Dシステムに対応するのを待つか、2Dシステムを使うか。&lt;br /&gt;
*** Unity New GUI&lt;br /&gt;
**** 現在α版。2-4ヶ月後にリリースか？&lt;br /&gt;
**** Unity2DでGUIを作成していいのか。&lt;br /&gt;
***** おすすめしない！&lt;br /&gt;
***** NGUI等従来の方法がおすすめ。&lt;br /&gt;
***** Spriteは「ゲームに特化した」コンポーネント。&lt;br /&gt;
****** GUIのための設定項目はない。&lt;br /&gt;
***** uGUIのヒエラルキーはNGUIをほぼ同じ。&lt;/p&gt;
&lt;p&gt;** 「Aiming開発ゲームの裏側」牧野 克俊さん(Aiming)&lt;br /&gt;
*** 幻塔戦記グリフォン&lt;br /&gt;
**** プロジェクト概要&lt;br /&gt;
***** オンラインアクション&lt;br /&gt;
***** iOS、Android。iPhone4Sでの動作が目安。&lt;br /&gt;
***** 開発期間は約1年2ヶ月。&lt;br /&gt;
***** MMORPGやブラウザゲーの開発経験者が中心。&lt;br /&gt;
***** 企画6人、クライアント5人、サーバ4人、グラフィク10+α&lt;br /&gt;
**** グラフィック&lt;br /&gt;
***** 方針&lt;br /&gt;
****** Drawcallは50が目安。&lt;br /&gt;
****** リアルタイムライティングなし。&lt;br /&gt;
****** テクスチャは可能な限り小さく。&lt;br /&gt;
***** キャラクタ&lt;br /&gt;
****** パーツをプログラムで結合。着せ替え可能にするため。&lt;br /&gt;
****** テクスチャは1024が1枚。&lt;br /&gt;
****** ポリゴン数は約2000。&lt;br /&gt;
***** ボス&lt;br /&gt;
****** テクスチャ512が1枚。&lt;br /&gt;
****** ポリゴン約3000。&lt;br /&gt;
***** ザコ&lt;br /&gt;
****** テクスチャ128が1枚。&lt;br /&gt;
****** ポリゴン&lt;br /&gt;
***** 背景&lt;br /&gt;
****** 1024が2枚。&lt;br /&gt;
****** ライトマップ1024が1枚。&lt;br /&gt;
****** マップ上のオブジェクト用に512が1枚。&lt;br /&gt;
****** ポリゴン数1000程度。&lt;br /&gt;
****** アルファで抜かず、適切な形のポリゴンにする。&lt;br /&gt;
***** エフェクト&lt;br /&gt;
****** パーティクル&lt;br /&gt;
****** テクスチャは複数エフェクトで使いまわす。&lt;br /&gt;
****** 半透明、加算がきつい。&lt;br /&gt;
***** ふりかえり&lt;br /&gt;
****** 描画速度は良好。&lt;br /&gt;
****** キャクター構築負荷高い。&lt;br /&gt;
****** スキニング負荷高い。&lt;br /&gt;
****** エフェクト負荷高い。カリングした。&lt;br /&gt;
****** エフェクトのロードタイミングはあまりよくない。&lt;br /&gt;
*******
はじめてエフェクトが発生するときに読み込んでいるがいまいち。&lt;br /&gt;
******* プリロードすべきかもしれない。&lt;br /&gt;
**** メモリ使用量&lt;br /&gt;
***** 全体の使用量200M程度。200M以下に抑えておかないと危険。&lt;br /&gt;
*****
かなり大まかな内訳は、メッシュ3M、テクスチャ40M、アニメーション10M、サウンド10M。&lt;br /&gt;
***** GC&lt;br /&gt;
****** ほぼ問題になっていない。&lt;br /&gt;
****** シーン切替時・大量のリソースアンロードは時間がかかる。&lt;br /&gt;
****** Animation.AddClipがかなりメモリを使用する。&lt;br /&gt;
**** UI&lt;br /&gt;
***** NGUI&lt;br /&gt;
****** 位置はアンカーで指定。&lt;br /&gt;
***** ワークフロー&lt;br /&gt;
****** プログラマがモックを作成。&lt;br /&gt;
****** グラフィッカーが見た目、位置を調整。&lt;br /&gt;
******
日本語はビットマップフォントを使用(開始時はUnity3.5だったので)。&lt;br /&gt;
***** ふりかえり&lt;br /&gt;
****** NGUIはまあまあよい。&lt;br /&gt;
****** パネル間の優先順位づけ。&lt;br /&gt;
****** ビットマップフォントでは字数が足りない。&lt;br /&gt;
******* チャット、掲示板等自由入力以外は問題ない。&lt;br /&gt;
****** ダイナミックフォントにかえたい。&lt;br /&gt;
**** リソースのダウンロード&lt;br /&gt;
***** アセットバンドルを使用。ファイル数約2000!&lt;br /&gt;
***** LoadFromCacheOrDownloadを使用。&lt;br /&gt;
***** 設定ファイルはアセットバンドル化していない。&lt;br /&gt;
***** Editor上ではResources.LoadAssetAtPathを使うようにしている。&lt;br /&gt;
***** 分け方&lt;br /&gt;
***** 振り返り&lt;br /&gt;
****** ダウンロード時間長い。&lt;br /&gt;
*******
エリア解放等のタイミングに合わせる形で分割するようにはしている。&lt;br /&gt;
****** 更新判断。&lt;br /&gt;
******* 限りなく自己申告に近い。&lt;br /&gt;
*******
テクスチャからどのプレハブが使用されているかを確認するよい方法がない。&lt;br /&gt;
**** Unityへの要望&lt;br /&gt;
***** Monoのバージョン上げて。&lt;br /&gt;
***** アセットバンドル再設計してほしい。&lt;br /&gt;
****** バージョンごとの互換性。&lt;br /&gt;
****** キャッシュの仕組み。&lt;br /&gt;
****** もともとあくまでWebPlayer用。&lt;/p&gt;
&lt;p&gt;** 「cocos2d-xおよび開発ツールについて」清水 友晶さん(TKS2)&lt;br /&gt;
*** 日本cocos2d-xユーザ会代表。&lt;br /&gt;
*** cocos2d-x開発。&lt;br /&gt;
*** cocos2d-xとは&lt;br /&gt;
****
2Dゲームフレームワーク。あくまでフレームワークでツールなどはない。&lt;br /&gt;
**** オープンソース。MITライセンス。&lt;br /&gt;
**** マルチプラットフォーム開発。10数種類。&lt;br /&gt;
**** 開発言語。C++、Lua、JavaScript。&lt;br /&gt;
****
Zynga、Wooga、Gameevil、Glu、GREE、Konami、TinyCo、HandyGames、IGG、Disney
Mobileなどが採用。&lt;br /&gt;
**** 公式コミュニティでは、Chukong、Google、MS、ARM、Intelなど。&lt;br /&gt;
*** 開発手順&lt;br /&gt;
**** XcodeでiOSメインに開発。&lt;br /&gt;
**** たまにEclipseでAndroidの確認。&lt;br /&gt;
****
Androidでもこまめにチェックして、並行して開発することがおすすめ。&lt;br /&gt;
*** メリット&lt;br /&gt;
**** オープンソース&lt;br /&gt;
**** クロスプラットフォーム&lt;br /&gt;
****
効率化。OpenGLを知らなくてもパフォーマンスの高い画像処理を行える。&lt;br /&gt;
**** cocos2d for iPhoneからの移行が容易。クラス名が同じ。&lt;br /&gt;
**** 基本的なことであれば、そこまでメモリを気にしなくても良い。&lt;br /&gt;
*** デメリット&lt;br /&gt;
**** ネイティブ間の連携が面倒。課金など。&lt;br /&gt;
***** Android&lt;br /&gt;
****** C++からAndroid SDKへアクセス。JNIを使用する必要がある。&lt;br /&gt;
***** iOS&lt;br /&gt;
****** Objective-C++があるのでまだ容易。&lt;br /&gt;
****
フレームワークでしか無いので、画面構成やアニメーションの作成に時間が掛かる。&lt;br /&gt;
*** 別途エディタを利用する。&lt;br /&gt;
**** CocosBuilder&lt;br /&gt;
***** レイアウトやアニメーションをGUIで調整可能。&lt;br /&gt;
***** Mac上で動作可能。&lt;br /&gt;
***** 多くの企業で利用されている。&lt;br /&gt;
***** 最新版CocosBuilder 3.0 Alpha 5&lt;br /&gt;
****** JSBの機能が大幅追加。&lt;br /&gt;
****** CocosPlayer&lt;br /&gt;
***** UIエディタ。&lt;br /&gt;
***** アニメーションエディタ。&lt;br /&gt;
***** ブラウザ上で実行。&lt;br /&gt;
***** Javascriptエディタ。&lt;br /&gt;
***** テクスチャアトラス。&lt;br /&gt;
***** 開発が止まっている&lt;br /&gt;
**** SpriteBuilder&lt;br /&gt;
***** CocosBuilderの後継。&lt;br /&gt;
***** CocosBuilderとの違い。&lt;br /&gt;
****** ノードにPhysics Nodeが追加。&lt;br /&gt;
****** CC Menuクラスによるノードが削除。&lt;br /&gt;
****** Skewアニメーションが追加。&lt;br /&gt;
****** JavaScriptエディタ機能がない。&lt;br /&gt;
****** アプリの言語設定。現在英語のみ。&lt;br /&gt;
****** 現在はiPhone用。&lt;br /&gt;
**** CocosStudio&lt;br /&gt;
***** 開発はクローズド。&lt;br /&gt;
**** Cocosino&lt;br /&gt;
***** JavaScriptエディタ。&lt;br /&gt;
***** 起動が速いシュミレータ。&lt;br /&gt;
***** KickStarterでの寄付に失敗。&lt;br /&gt;
***** その後、ソース公開。&lt;br /&gt;
**** CocoMoon Studio&lt;br /&gt;
***** UIエディタ。&lt;br /&gt;
***** Luaエディタ。&lt;br /&gt;
***** 9ドル。(条件により半額)&lt;/p&gt;
&lt;p&gt;** 「 enchant.jsの野望 9分コーディングライブ」 清水
亮さん(ユビキタスエンターテインメント)&lt;br /&gt;
*** enchant.js&lt;br /&gt;
**** 3000以上のゲームが開発された。&lt;br /&gt;
**** アバターが作れる。&lt;br /&gt;
**** HTML5はOS。&lt;br /&gt;
**** (ここで高橋諒さんによるライブコーディング)&lt;br /&gt;
***** エディタとかはない。コーディングする楽しさを重視。&lt;br /&gt;
***** javascriptで柔軟にかける。&lt;br /&gt;
**** 教育、公演&lt;br /&gt;
***** カリフォルニア工芸大学でenchant.js必修。&lt;br /&gt;
***** スウェーデンのウプサラで講演。&lt;br /&gt;
***** code gleap&lt;br /&gt;
**** 哲学&lt;br /&gt;
***** とにかく簡単。&lt;br /&gt;
***** 手早く作れる。&lt;br /&gt;
***** 楽しく作れる。&lt;br /&gt;
***** コード中心主義。&lt;br /&gt;
**** 任天堂&lt;br /&gt;
***** 公式サードパーティ向けに配布。&lt;br /&gt;
***** Wiiリモコン/WiiUゲームパッド対応。&lt;br /&gt;
***** Millverse対応。&lt;br /&gt;
**** enchantMoon&lt;br /&gt;
***** enchant.jsベース。&lt;br /&gt;
**** 目的&lt;br /&gt;
***** 人類総プログラマー計画。&lt;br /&gt;
***** 小学生でもプログラミング。&lt;br /&gt;
***** ラブレターにプログラミング。&lt;br /&gt;
***** 親子でプログラミング。&lt;br /&gt;
***** お葬式にもプログラミング。&lt;br /&gt;
***** 若い才能を伸ばす。&lt;/p&gt;
&lt;p&gt;** 「Playgroundの描画ロジック」 ロマン・ピコアさん(KLab) 
＆「マルチPF対応ゲームエンジン内のAndroid対応」中澤 慧さん(KLab)&lt;br /&gt;
*** What is (not) Playground.&lt;br /&gt;
**** 2011年秋、開発のきっかけ。&lt;br /&gt;
*****
モバイル向けの有力なクロスプラットフォームエンジンが無かった。&lt;br /&gt;
***** cocos2d-xが初期リリースされた頃。&lt;br /&gt;
***** 少人数で開発。2Dに特化。&lt;br /&gt;
*****
Win32/iOS/Android対応のエンジン+テクスチャアトラス/UI他作成ツール。&lt;br /&gt;
***** プロジェクトの要望に合わせて機能追加。&lt;br /&gt;
**** 描画の仕組み&lt;br /&gt;
***** 古い端末でも60fpsを維持する方法。&lt;br /&gt;
****** まったく描画しない（カリング)&lt;br /&gt;
****** ピクセル毎の負担を減らす又ステート変更を減らす&lt;br /&gt;
******* 透明でないオブジェクトを「近くから遠く」にソート。&lt;br /&gt;
******* 透明なオブジェクトを「遠くから近く」にソート。&lt;br /&gt;
***** モバイル、2Dの場合の特徴。&lt;br /&gt;
****** Shaderが少ない。&lt;br /&gt;
****** 透明でないものはほとんどない。背景のみ。&lt;br /&gt;
******* Z-Bufferのトリックは無意味。&lt;br /&gt;
****** 3Dに比べてベクタデータ、頂点データ少ない。&lt;br /&gt;
****** ドローコールを減らす。&lt;br /&gt;
******* ステートが同じならバッチする。&lt;br /&gt;
****** 速度を保つためにCache and Flag。&lt;br /&gt;
******* 変わった箇所だけを計算。&lt;br /&gt;
****** cocos2Dはどうか。&lt;br /&gt;
*******
バッチは可能だが、プログラマの責任。Playgroundは自動で最適化する。&lt;br /&gt;
****** Unityではどうか。&lt;br /&gt;
******* staticバッチ、dynamicバッチ、cullingをサポート。&lt;br /&gt;
******* 2DライブラリではC#で自前でバッチする。&lt;br /&gt;
**** PlaygroundとAndroid&lt;br /&gt;
***** Androidはバラエティに富んでいる。&lt;br /&gt;
****** CPU、グラフィクス、サウンドで様々なハードウェア。&lt;br /&gt;
****** 多くのOSバージョン、端末固有のドライバ。&lt;br /&gt;
****** 多くのデバイスでテストすることが必然。&lt;br /&gt;
******
社内テスト端末限定の機能としてアプリ実行状況モニタリングサービスを作った。&lt;br /&gt;
***** サウンド重視のモバイルゲーム設計。&lt;br /&gt;
****** 「システムクロック=正義」な実装だと音ズレが激しく詰む。&lt;br /&gt;
***** OSとドライバの限界。&lt;br /&gt;
****** Android4.1以降はLow Latency Audioを利用できる。&lt;br /&gt;
****** プレイアビリティに強く関わるのはジッタ(ゆらぎ)。&lt;br /&gt;
****** サウンドの再生時間とシステムクロックの情報をブレンド。&lt;br /&gt;
****** 音飛び時もスムージング。&lt;br /&gt;
****** ゲームとして都合の良い、一貫性のあるタイムスタンプ。&lt;br /&gt;
***** 今後&lt;br /&gt;
****** Low Latency
Audioを、より広い範囲の端末で利用できるようにサウンドライブラリを改修。&lt;br /&gt;
******
Android4.4の新機能を利用してサウンド出力時間差をある程度把握して改善に活かす。&lt;br /&gt;
***** 宣伝&lt;br /&gt;
****** オーディオとAndroidのDRMをEffective Androidに寄稿。&lt;/p&gt;
&lt;p&gt;** 「次世代ゲームエンジンの比較」浦田 祐輝さん(CROOZ)&lt;br /&gt;
*** 価格の比較&lt;br /&gt;
*** cocos2d-xが表示できるSprite数が最も多そう&lt;br /&gt;
*** Unityの情報が圧倒的に多い。&lt;br /&gt;
*** cocos2d-x&lt;br /&gt;
**** それぞれのプロジェクトが同じ場所を参照している。&lt;br /&gt;
**** パフォーマンス良い。&lt;br /&gt;
**** 情報がまだ少ない。バージョンが上がった際の対応などが難しい。&lt;br /&gt;
*** Unity&lt;br /&gt;
**** カスタマイズ性。&lt;br /&gt;
**** 情報が多い。&lt;br /&gt;
**** 2Dのパフォーマンスが他のエンジンに比べて高くない。&lt;br /&gt;
***** 4.3のリリースでこの点は解消されたかも。&lt;br /&gt;
**** チーム開発。sceneがコンフリクトする。&lt;br /&gt;
**** Unity Asset Serverを使うとよいかも&lt;br /&gt;
*** enchant.js&lt;br /&gt;
**** 分かりやすい。&lt;br /&gt;
**** HTML5なので取り組みやすい。&lt;br /&gt;
**** リリースするならWebViewで側を作る必要がある。&lt;br /&gt;
*** Playground&lt;br /&gt;
**** ツールが少ない&lt;br /&gt;
**** コンパイルする必要がない。&lt;br /&gt;
*** Project Anarchy&lt;br /&gt;
**** 無料で、Havok社が持っているライブラリ群を利用できる&lt;br /&gt;
**** 今年6月リリースで情報が少ない&lt;br /&gt;
**** Windowsのみなので、iOSのプロジェクトはmacに転送する必要あり。&lt;br /&gt;
*** Unreal Engine&lt;br /&gt;
**** ハイパフォーマンス。&lt;br /&gt;
****
コストが高い。売上の5万ドルを超えると売上の25%を支払う必要あり。&lt;br /&gt;
**** ある程度のスキルを要する。&lt;br /&gt;
**** unreal scriptを用いる。学習コスト高め。&lt;br /&gt;
*** 総評&lt;br /&gt;
****
3Dエンジンは一度にたくさんのSpriteを表示するのに向いていない。&lt;br /&gt;
***** 2Dは2Dのエンジンを使うほうが良い。&lt;br /&gt;
**** 3DはUnityがおすすめか。&lt;br /&gt;
**** とことん追求する場合はUnrealもよい。&lt;br /&gt;
**** チーム開発に対応していることや、日本語の情報があることも重要。&lt;/p&gt;</summary></entry><entry><title>AOR・アーバニティー・相対主義。アンチヤンキー。</title><link href="http://yuseinishiyama.github.io/posts/2013/11/06/aor-urbanity-relativism-anti-gangs/" rel="alternate"></link><updated>2013-11-06T01:19:00+01:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-11-06:posts/2013/11/06/aor-urbanity-relativism-anti-gangs/</id><summary type="html">&lt;p&gt;私は感性が完全に都会的だと思う。&lt;/p&gt;
&lt;p&gt;かなり傲慢な物言いに聞こえるかもしれないが、優劣ではなく、あくまで気質について述べているのである。それに、これからの文章を読めば、私が「都会的」なことを誇っていないということがよく分かるだろう。&lt;/p&gt;
&lt;p&gt;都会には人が多い。&lt;br /&gt;
人が多いと、価値観が多様になる。&lt;br /&gt;
価値観が多様的になると、特定の価値観の優位性を認めなくなる。&lt;br /&gt;
特定の価値観の優位性を認めない人は、「正しさ」を諦める。&lt;/p&gt;
&lt;p&gt;この感性は、AORやシティ・ポップという言葉に代表される都会的な音楽の特徴と一致する。AORの特徴は何かというと、本質的にはジャズの影響を強く受けた複雑なハーモニーである(当然、ドラムスをジェフ・ポーカロにするとより効果的であるのは言うまでもない)。『After
The Love is Gone』や『Nothin' You Can Do About
It』などがAORの代表曲とされるのは、それらが今までのポップスではありえない、技巧的で複雑なハーモニーワークを駆使しているからに他ならない。&lt;/p&gt;
&lt;iframe width="420" height="315" src="//www.youtube.com/embed/0RtjatjyeQQ" allowfullscreen frameborder="0"&gt;&lt;/iframe&gt;

&lt;iframe width="420" height="315" src="//www.youtube.com/embed/mzfDfh_8_gs" allowfullscreen frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;3和音のメジャー/マイナーの世界は二項対立の世界だ。そこには明確な明暗の境がある。しかし、モダンジャズ、そしてその影響下にあるAORは基本的に4和音以上の世界である。4和音のメジャー/マイナーは主音を変えれば明暗が裏返る。Imaj7にはIIImがあるし、IIIm7にはVがある。複雑なハーモニーは多面的であり、二項対立ではない。見方によって、文脈によって明るく聞こえたり暗く聞こえたりする。『Private
Eyes』のような上に挙げたの2曲に比べれば随分とキャッチーな曲でさえ、同主転調を駆使したハーモニワークによって、明暗の曖昧なモダンさを表現している。&lt;/p&gt;
&lt;iframe width="420" height="315" src="//www.youtube.com/embed/anLfoy2XsFw" allowfullscreen frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;このハーモニーの多面性はまさに都会的折衷であり、それゆえにAORは都会的なのだ。&lt;/p&gt;
&lt;p&gt;南佳孝は&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人生はゲーム&lt;/p&gt;
&lt;p&gt;互いの傷を慰めあえれば&lt;/p&gt;
&lt;p&gt;答えはいらない&lt;/p&gt;
&lt;p&gt;(『スローなブギにしてくれ』より)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;と歌っている。この「正しさ」に対する諦めは都会的価値観の1つの特徴だ。&lt;br /&gt;
また、キリンジだとこうなる。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;自棄っぱちのオプティミスト&lt;/p&gt;
&lt;p&gt;強気のペシミスト&lt;/p&gt;
&lt;p&gt;お大事に&lt;/p&gt;
&lt;p&gt;(『自棄っぱちのオプティミスト』より)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;何事も表裏一体であり、両極には答えがない。中庸・相対主義という争いを不毛とする平和主義者のメッセージである。&lt;/p&gt;
&lt;p&gt;また同時に、相対主義者は知っている。それが、間違えることのリスクを一切取らない卑怯者の考えであることも。&lt;/p&gt;
&lt;p&gt;「どれでもいい」という相対主義は「どうでもいい」という無関心に繋がる。音楽のアナロジーで遊んでばかりいても意味がないかもしれないが、4和音以上のメジャー/マイナーが「多面的」であるなら、4度の響きは「無面的」といっていいだろう。そして、4度の響きも非常にモダンだ。9thの音はとてもモダンだが、これは9thが5thと4度の関係にあるためだろう。和音を複雑にすればするほど、こうした無機質な関係性も生じてくる。多様であるということが、無であることにつながるというのは非常に皮肉なことではないだろうか。&lt;/p&gt;
&lt;iframe width="420" height="315" src="//www.youtube.com/embed/ywhutgpZLVk" allowfullscreen frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;ジャズのモダニティーの萌芽である、Milesの『Love For
Sale』。音楽に明るくない人でも、Bill Evansのイントロの4th
Voicingは「モダン」だと感じるだろう。&lt;/p&gt;
&lt;p&gt;一方で、ヤンキーの文化はこの都会的価値観とは対照的だ。&lt;/p&gt;
&lt;p&gt;彼らは、傍若無人であるが、同時に「正義」「仲間」「人情」などという言葉を大事にする。これは、彼らが明確で絶対主義的な価値観を有していることの証拠である。彼らは、それに合致するものを積極的に守り、その一方で合致しないものは徹底的に排除しようとする。&lt;/p&gt;
&lt;p&gt;私はこういう不良的価値観を持った人と接するのが苦手だ。苦手というのは間違っているという意味ではない。私達、都市生活者に「間違い」という言葉はない。間違っているかどうかは分からないからだ。だから相対主義者は、不良的絶対主義には賛同しないが、それと同時に、その価値観に食って掛かって否定することもしない。相対主義は行動力の欠如に他ならず、結局私はその場でヘラヘラと引き攣った笑いを浮かべているしか出来ないのだ。こうして、不良的価値観の元では、私は「はっきりしない、男らしくないやつ」ということになって、忌み嫌われる。十分にあり得るご意見であろう。「否定はしない」。&lt;/p&gt;
&lt;p&gt;何が言いたいかというと、相対主義者は、相対主義であることを自覚しており、相対主義の欠点にも気づいているということが言いたいのである。そして、今の相対主義と、絶対主義の間の「より良い相対主義」を目指すのである。そして、これを繰り返す。都会的である人は、都会的であることを誇りに思わず、またそういう誇りに思っていないことをも誇りに思っていない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{.lang:lisp .decode:true title="再帰的な自己否定"}
(...(((都会的であることを　誇りに思っていないことを) 誇りに思っていないことを) 誇りに思っていないことを) 誇りに思っていないことを) ...)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;だから、私は「再帰」に惹かれているに違いない。&lt;/p&gt;
&lt;p&gt;[amazonjs asin="4480091955" locale="JP" title="相対主義の極北
(ちくま学芸文庫)"]&lt;/p&gt;</summary></entry><entry><title>SICP 第1章「Building Abstractions with Procedures」を読み終えて。(後編)</title><link href="http://yuseinishiyama.github.io/posts/2013/10/27/sicp2/" rel="alternate"></link><updated>2013-10-27T03:50:00+01:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-10-27:posts/2013/10/27/sicp2/</id><summary type="html">&lt;p&gt;&lt;a href="http://yuseinishiyama.com/archives/184" title="SICP 第1章「Building Abstractions with Procedures」を読み終えて。(前編)"&gt;(前編はこちら)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1章から学べたことを列挙する。&lt;/p&gt;
&lt;p&gt;・Schemeに慣れた。  &lt;/p&gt;
&lt;p&gt;if、cond、define、let、lambdaなどを用いてプログラミングできるようになった。例の「カッコ」にもだいぶ慣れてきた。&lt;/p&gt;
&lt;p&gt;・linear recursionとiterationの違いが分かるようになった。  &lt;/p&gt;
&lt;p&gt;今以上に不慣れな時のコードではあるが、以下のようにrecursionとiterationで再帰が書けるようになった。後者のほうが遥かに効率が良い。&lt;/p&gt;
&lt;p&gt;``` {.lang:scheme .decode:true title="Exercise 1.11. "}
;recursion
(define (f n)
  (cond ((&amp;lt; n 3) n)
        (else (+ (f (- n 1))
                 (&lt;em&gt; 2 (f (- n 2)))
                 (&lt;/em&gt; 3 (f (- n 3)))))))&lt;/p&gt;
&lt;p&gt;;iteration
(define (f-iter product product-1 product-2 counter max-count)
  (cond ((&amp;gt; counter max-count) product)
        (else (f-iter (+ product (&lt;em&gt; 2 product-1) (&lt;/em&gt; 3 product-2)) product product-1 (+ counter 1) max-count))))
```&lt;/p&gt;
&lt;p&gt;・ファーストクラスオブジェクトについて理解した。  &lt;/p&gt;
&lt;p&gt;当然Lispをやるのだから事前に知っていたことではあったが、Procedureを返す関数とかをたくさん書いているうちに以前よりはっきり「ファーストクラス感(？)」を理解できるようになった。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In general, programming languages impose restrictions on the ways in
which computational elements can be manipulated. Elements with the
fewest restrictions are said to have first-class status. Some of the
``rights and privileges'' of first-class elements are:&lt;/p&gt;
&lt;p&gt;They may be named by variables.&lt;br /&gt;
 They may be passed as arguments to procedures.&lt;br /&gt;
 They may be returned as the results of procedures.&lt;br /&gt;
 They may be included in data structures.&lt;/p&gt;
&lt;p&gt;Lisp, unlike other common programming languages, awards procedures
full first-class status. This poses challenges for efficient
implementation, but the resulting gain in expressive power is
enormous.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;・数学的な考え方が身についた。  &lt;/p&gt;
&lt;p&gt;いや、はっきりいって数学で躓いて飛ばしてしまった問題とかもたくさんあって、むしろ数学をなんとかしないとヤバイ感じがするが、それでも前よりは数学的な考えが身についたような気がする。数学が苦手で今まで無視し続けた自分としては、これだけたくさんの近似値を求める式を実装しただけでもかなり変わったと思う。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Several of the numerical methods described in this chapter are
instances of an extremely general computational strategy known as
iterative improvement. Iterative improvement says that, to compute
something, we start with an initial guess for the answer, test if the
guess is good enough, and otherwise improve the guess and continue the
process using the improved guess as the new guess.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数学ってこういうことなんだな、とほんの少し思えた。&lt;/p&gt;
&lt;p&gt;どうせ、最初はほとんど理解できないんだろうな、と思った割には重要な点はかなり吸収できたと思う。とは言え、数学でつまずいて1/3くらいのExerciseはあいまいなままだから、なんとかしないといけない。どっちにしろ、最近3Dグラフィックスとか画像処理とか齧るようになってきて、数学の重要性を実感してきたところだし、ちょうど良いだろう。&lt;/p&gt;
&lt;p&gt;さて、次はデータの抽象化だ。&lt;/p&gt;</summary></entry><entry><title>SICP 第1章「Building Abstractions with Procedures」を読み終えて。(前編)</title><link href="http://yuseinishiyama.github.io/posts/2013/10/27/sicp1/" rel="alternate"></link><updated>2013-10-27T03:15:00+01:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-10-27:posts/2013/10/27/sicp1/</id><summary type="html">&lt;p&gt;&lt;a href="http://yuseinishiyama.com/archives/179" title="代替不可能なプログラマとは。"&gt;先日の投稿「代替不可能なプログラマとは。」&lt;/a&gt;にある通り、SICPを読み始め、先日第1章「Building
Abstractions with
Procedures」を読み終えた。実際には&lt;a href="http://yuseinishiyama.com/archives/179" title="代替不可能なプログラマとは。"&gt;先日の投稿&lt;/a&gt;より少し前から読み始めていて、1章読み終えるのに3週間ほどかかったことになる。(さらに言うと、3ヶ月ほど前に、ビデオ講義を3時間分ほど鑑賞した。この時は、テキストが存在することを知らなかったのと、当たり前だが偉大なるハル・アベルソン氏とジェラルド・ジェイ・サスマン氏の早口の英語が聞き取れるはずもなく、あえなく挫折した。)&lt;/p&gt;
&lt;p&gt;学習環境は以下。&lt;/p&gt;
&lt;p&gt;・テキストは原著で。  &lt;/p&gt;
&lt;p&gt;テキストは原著がオンラインで閲覧できるので、原著で読むことにした。日本語訳に対する酷評を聞き過ぎたせいで、理解できなかった場合に翻訳のせいにしてしまいそうだからだ。それと、語学能力の訓練にもなればと思っている。英語だけをやっている時間がないので、英語とプログラミングを一緒に効率良く学びたい。&lt;/p&gt;
&lt;p&gt;・開発環境にはDrRacketを使用。  &lt;/p&gt;
&lt;p&gt;コマンドラインとかEmacsとかも試してみたが、結局一番楽そうなものに落ち着いた。&lt;/p&gt;
&lt;p&gt;SICPを読んだ結果できるようになること、得られる知識というのははっきりしていなくて、ただただ今よりプログラミングを深く理解できるに違いないという予感だけがモチベーションになっている。SICPに関して「&lt;a href="http://www.cs.berkeley.edu/~bh/sicp.html" title="Why Structure and Interpretation of Computer Programs matters"&gt;Why
Structure and Interpretation of Computer Programs
matters&lt;/a&gt;」という記事を見つけた。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Before SICP, the first CS course was almost always entirely filled
with learning the details of some programming language. SICP is about
standing back from the details to learn big-picture ways to think
about the programming process. It focused attention on the central
idea of abstraction -- finding general patterns from specific problems
and building software tools that embody each pattern. It made heavy
use of the idea of functions as data, an idea that's hard to learn
initially, but immensely powerful once learned. (This is the same
idea, in a different form, that makes freshman calculus so notoriously
hard even for students who've done well in earlier math classes.) It
fit into the first CS course three different programming paradigms
(functional, object oriented, and declarative), when most other
courses didn't even really discuss even one paradigm.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SICPはプログラミングの"big-picture"について語っているらしく、私の予感はある程度当たっているに違いない。&lt;/p&gt;
&lt;p&gt;私の様なプログラミング新参者にとっては、日常的に利用するものはほぼすべて高度に抽象化されているのが当たり前だ。もちろん抽象化されているものを、そのインターフェースに見合った抽象化された思考によって用いることが業務では非常に重要だし、都度自分で全部作るというのはむしろ仕事ができない人間がやることだろう。だが、こういう作業をひたすらに進めていっても、「How
to Program」までにしかたどり着かず、全体像つまり「What is
Programming」を知ることは永遠にないのではないかという考えがが日増しに強くなってきた。これは道具の使い方を覚えているだけの作業ではないのか。この言語は最新版でこんなモダンな機能が追加された、このIDEではこんな便利な補完機能がある、エディタを自分好みにカスタマイズするには・・・。世の中の大半のことは道具を使うことであるはずなのに、プログラミングに関してはそれが大した意味をなさないように感じる。&lt;/p&gt;
&lt;p&gt;道具には寿命がある。例えば物理や数学という道具は寿命が長い。そうとう大きなパラダイムシフトがなければ、その基板が崩れることはないだろう。だから、その道具を使えることには普遍的価値がある。私はピアノを演奏するが、ピアノはどうだろう。ピアノとはまさに近代音楽のパラダイムそのものを体現するようなもので、こちらもかなり普遍的だ。一方で、音楽のパラダイムは大きな変化が予想され、既に音楽に対するピアノというインターフェースは以前ほど重要ではなくなっている。楽器が弾けず、楽譜も読めない人が、音楽の世界で大成功する時代だ。だから、物理や数学に比べるとやや脆いかもしれない。さて、特定のプログラミングスキルはどうだろうか。これは、先の2つの例よりはるかに寿命が短いと言わざるをえない。ツールはもちろん、言語そのものや、プログラミングのパラダイムまで短期間で移り変わる。寿命が短いものほど、覚えることが知恵というよりは知識でしかなくなっていく。&lt;/p&gt;
&lt;p&gt;とは言え、プログラミングという概念そのものの寿命は相当長いはずだ。詳細は大きく変化していったとしても、コンピュータが我々の生活を支えるという環境が変わってしまうということは、今のところ想像できない。だから、プログラミングを知っている、ということは紛れも無く知恵だろう。結局、情報が普遍的かどうかが、「知識」と「知恵」の境目である。だから、プログラミングの全体像について書かれたSICPで学べることは、知恵に違いない。ツールの使い方や、局所的なケースにやたらとこだわる人もいるし、突き詰めればそういうことも意味をなすかもしれないが、状況が変わればまた別のことを覚えなければならない。それでは技術のラットレースに飲み込まれていくだけで、体力がなくなったり、頭が硬くなったらその時点で終わりだ。使い古された「プログラマ30歳定年説」という言葉も、そういうラットレースに巻き込まれた人にとってはあながち間違いではないかもしれない。自分はそういう風になりたくない。過去の積み重ねが現在にも役立つように、自分のポートフォリオが豊かになるように、そういう風になりたい。だから、普遍的なプログラミングの本質を学びたいのだ。&lt;a href="http://yuseinishiyama.com/archives/188" title="SICP 第1章「Building Abstractions with Procedures」を読み終えて。(後編)"&gt;（後編へ続く)&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>代替不可能なプログラマとは。</title><link href="http://yuseinishiyama.github.io/posts/2013/10/23/necessary-programmer/" rel="alternate"></link><updated>2013-10-23T02:32:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-10-23:posts/2013/10/23/necessary-programmer/</id><summary type="html">&lt;p&gt;果たしてプログラマという職業はクリエイティブな職業だろうか。&lt;/p&gt;
&lt;p&gt;そもそも、クリエイティブとはどういうことだろうか。&lt;a href="http://yuseinishiyama.com/archives/75" title="センスについて"&gt;以前の投稿&lt;/a&gt;にもあるように、私は「センス」なるものは一切信用していない。クリエイティブとて同じことで、検証不可能な「センス」によって計られるべきではない。おそらく、クリエイティブとは「代替不可能な価値をもたらす、実証可能な能力そのもの」だ。私なりのクリエイティブを定義したところで、改めて問うてみる。&lt;/p&gt;
&lt;p&gt;果たしてプログラマという職業はクリエイティブな職業だろうか。&lt;/p&gt;
&lt;p&gt;残念ながらほとんどの場合はそうではない。世の中にある大半のコードは代替可能な能力によって生産されている。ほぼ全ての実現したいことに関する情報は、インターネットのどこかに存在する。私が日々の仕事で行っていることも、もちろんそうだ。また、これは非常に大事なことだが、目新しいことができるかどうかでプログラマの能力を計るべきでもない。誰もやりたがらないことを確実に行うプログラマの価値は非常に高い。一般的なプロダクトの完成に寄与する割合で言えば、目新しさは1割ぐらいで、残りの9割は能力的には誰でも出来る作業だろう。だから、デヴィッド・カトラーは優秀なのである。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;カトラーは、プログラマーがいつも新しいコードだけを書きたがり、ミスは忘れたいと考えているとみると、うるさく小言を言った。(G・パスカル・ザカリー著『闘うプログラマ』より)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;こうした理由から、代替可能な作業の精度を挙げて、その精度が代替不可能になることを目指すという手段で代替不可能になることも考えられる。だが、頭では分かっていても、どうしても「他の人には分からないことができること」のほうが精神衛生上好ましいと考えてしまう。では、そういう「誰にも分からないこと」が私にできる可能性があるだろうか。はっきりいって今のところその可能性は絶望的に低い。そもそも、調べても誰も言及していないようなことを実現したことがあるというような幸運な人自体滅多にいないだろう。やはり、「未踏の地に辿り着く」というのはあまりに高望みしすぎなのだろうか。&lt;/p&gt;
&lt;p&gt;鈴木慶一率いるムーンライダーズの曲「マニアの受難」の歌詞にはこんな一節がある。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;全ての事はもう一度行われている。全ての土地はもう人が辿り着いている。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;全くその通りだ。これだけ過去のアーカイブ化が進んでいる時代で、過去に前例のないことをやるのは相当困難である。この歌詞には、過去に飲み込まれてしまう人間の虚しさが端的に言い表されている。「誰も成し遂げたことのないことをやりたい」というのも「誰も成し遂げたことのないことをやっている」というのも、どちらも空虚に聞こえる。まわりが、そして過去が見えていない人間の言葉に聞こえる。&lt;/p&gt;
&lt;p&gt;だが、幸いにも技術の世界は現在が過去を超えていることを実感できる世界だ。だから、どこかで誰かが未踏の地を踏んでいる。もし、単なる希望で、恥を承知でものを言っていいならば、やっぱり私も未踏の地を踏んでみたい。&lt;/p&gt;
&lt;p&gt;さて、ここまでは完全に理想の話だ。何事も極端には解決はなく、良い頃合いというのがある。例えば、今回だと「未踏の地を踏みたい」というところから「踏める人がかなり限られている土地を踏みたい」に変えてみると少し現実的になるだろう。とはいえ、これでも相当な高望みかもしれない。私は完全に独学のプログラマで、さらに経験も2年に満たない。文系の学部卒で、それも美学とかいうプログラミングには直接結びつかない学問を専攻していた(当然ながら間接的な関係性はある。美学や哲学に興味がなければ、『ゲーデル・エッシャー・バッハ(GEB)』を読むこともなく、またそれを読んでいなければプログラマにもなっていないだろう)。そんな人間がいきなり大それたことができるわけがない。だが、問題なのは大それたことをやるにはどんなスキルがいるかも分からないということなのだ。それを紐解くには、まず自分にとって「大それたこと」・「代替不可能なこと」を定義しなければならない。ざっと思いつくのは以下の様なものだ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新しいハードウェアの開発に関わることができる。&lt;/li&gt;
&lt;li&gt;新しいプログラミング言語やコンパイラを開発できる。&lt;/li&gt;
&lt;li&gt;新しいアルゴリズムを発案できる（画像処理など）。&lt;/li&gt;
&lt;li&gt;海外にいっても通用する。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;こうして見ると、私の「未踏観」はどうやら低レイヤや数学の理解にあるような気がする(4は少し毛色が違って、人脈とか語学能力も関わってくるが、それもベースとなる技術力があってのことだ)。だが、残念ながらこれらはどうもアカデミックな素養が必須なように見える。一方で、私はプログラミングというジャンルにおいて、アカデミックからは最も縁遠いところにいる人間だ。ここで選択を迫られる。それは&lt;/p&gt;
&lt;p&gt;「今からでは遅く、時間を無駄にしないために方向転換する」と「遅くても遅すぎることはないからひたすらに努力する」&lt;/p&gt;
&lt;p&gt;の選択だ。何度も前者を選びそうになったが、じゃあプログラム以外に何か私自身に大きなアドバンテージがある分野があるのか、といえばそんなことはなく、腹を括って後者を選ぶしか無い。惰性で生きることを選択しない限り、「やる気ある凡人」というのは得てしてこの選択を迫らているのではないかと思う(ちなみに、凡人でない人というのは、例えば「3歳からバイオリンを始め、若くして国際コンクールで輝かしい成績をおさめ、超有名芸大を卒業し、今では世界的バイオリニストです」みたいな人をさす。こういう人は、私のような凡人からすると、能力と目標が一致していて、とても幸せに見えるのだが、どうなのだろうか。一度でいいからそういう人の意見を直接聞いてみたい)。&lt;/p&gt;
&lt;p&gt;前置きが長くなったが、後者を選んだ結果、「アカデミックなコンピュータの基礎の理解」に時間を充てることにした。そして、その達成のための手段として、高名な「コンピュータの構成と設計(通称パタヘネ)」と「計算機プログラムの構造と解釈(通称SICP)」を読むことにした。きっとこれを読んだからといって、いきなり「準未踏の地を踏む」という目標が達成できるわけではないだろうし、むしろ独学者特有のエスタブリッシュメントに対するコンプレックス丸出しの解決策に過ぎないような気もする。だが、「凡庸なプログラマであることを悩んでいる人間」より「凡庸なことに悩んだ結果、アカデミックな本を読んでコンプレックスを少し解消した人間」のほうがまだ数が少なく、それゆえに一歩「代替不可能」に接近していると言えるはずだ。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;結論:「パタヘネ」と「SICP」を1年内に完読することにした。&lt;/strong&gt;&lt;/p&gt;</summary></entry><entry><title>テーマを変更しました。</title><link href="http://yuseinishiyama.github.io/posts/2013/10/09/%e3%83%86%e3%83%bc%e3%83%9e%e3%82%92%e5%a4%89%e6%9b%b4%e3%81%97%e3%81%be%e3%81%97%e3%81%9f%e3%80%82/" rel="alternate"></link><updated>2013-10-09T02:33:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-10-09:posts/2013/10/09/%e3%83%86%e3%83%bc%e3%83%9e%e3%82%92%e5%a4%89%e6%9b%b4%e3%81%97%e3%81%be%e3%81%97%e3%81%9f%e3%80%82/</id><summary type="html">&lt;p&gt;開発者のWordpressサイトがデフォルトのテーマだというのもなんとなく恥ずかしいので、テーマを作成してみた。とはいえ、Webの開発経験は全然ないので結構苦戦した。未だにあちこち粗が目立つ。しかし、「そのうち全部直して適応〜」とかいってると、一生デフォルトのを使い続けそうなので、先に本番環境に適応してから少しずつ修正することにした。&lt;/p&gt;
&lt;p&gt;レスポンシブデザインとかそういうことも考えだすと、自作するのを辞めたい衝動に駆られてしまうが・・・。&lt;/p&gt;</summary></entry><entry><title>HOME</title><link href="http://yuseinishiyama.github.io/posts/2013/09/29/%e3%83%9b%e3%83%bc%e3%83%a0/" rel="alternate"></link><updated>2013-09-29T02:59:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-09-29:posts/2013/09/29/%e3%83%9b%e3%83%bc%e3%83%a0/</id><summary type="html"></summary></entry><entry><title>ABOUT</title><link href="http://yuseinishiyama.github.io/posts/2013/09/29/about/" rel="alternate"></link><updated>2013-09-29T02:59:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-09-29:posts/2013/09/29/about/</id><summary type="html"></summary></entry><entry><title>iOSでアプリの最新バージョンを取得する方法。</title><link href="http://yuseinishiyama.github.io/posts/2013/09/16/ios%e3%81%a7%e3%82%a2%e3%83%97%e3%83%aa%e3%81%ae%e6%9c%80%e6%96%b0%e3%83%90%e3%83%bc%e3%82%b8%e3%83%a7%e3%83%b3%e3%82%92%e5%8f%96%e5%be%97%e3%81%99%e3%82%8b%e6%96%b9%e6%b3%95%e3%80%82/" rel="alternate"></link><updated>2013-09-16T21:50:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-09-16:posts/2013/09/16/ios%e3%81%a7%e3%82%a2%e3%83%97%e3%83%aa%e3%81%ae%e6%9c%80%e6%96%b0%e3%83%90%e3%83%bc%e3%82%b8%e3%83%a7%e3%83%b3%e3%82%92%e5%8f%96%e5%be%97%e3%81%99%e3%82%8b%e6%96%b9%e6%b3%95%e3%80%82/</id><summary type="html">&lt;p&gt;開発者であれば、ユーザーには自分の開発したアプリの最新版を使ってほしいと思うだろう。また、ユーザーのアプリバージョンにばらつきがないことは、ビジネス面のメリットも大きい。仕事として開発を行っている人であれば、「アプリのアップデートが行われた場合に通知する機能」の実装を要求されたことは多々あるだろう。&lt;/p&gt;
&lt;p&gt;そこで今回は、&lt;/p&gt;
&lt;p&gt;アプリの最新版を取得し、ユーザーが利用しているアプリが最新版より古ければ通知する機能&lt;/p&gt;
&lt;p&gt;の実装方法を紹介する。&lt;/p&gt;
&lt;p&gt;さて、まず考えなくてはいけないのは、どこからアプリの最新版を取得するか、ということである。これにはおおまかに言って、2通りの方法がある。「1.自前のサーバを利用する方法」、と「2.AppleのAPIを利用する方法」の2つだ。どちらが適切な方法であるか比較するために、それぞれのメリット、デメリットを挙げてみた。&lt;/p&gt;
&lt;p&gt;1.自前のサーバを利用する方法&lt;/p&gt;
&lt;p&gt;メリット&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;テストが容易。&lt;/li&gt;
&lt;li&gt;更新のタイミングを自由に決めることができる。&lt;/li&gt;
&lt;li&gt;取得先が勝手に変更されることがない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;デメリット&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;運用者が必要。&lt;/li&gt;
&lt;li&gt;運用ミスが発生する可能性がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.AppleのAPIを利用する方法。&lt;/p&gt;
&lt;p&gt;メリット&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自分で運用しなくて良い。&lt;/li&gt;
&lt;li&gt;運用ミスが発生しない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;デメリット&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;テストが行えない。&lt;/li&gt;
&lt;li&gt;APIが変更された場合、機能が無効になる。&lt;/li&gt;
&lt;li&gt;APIから取得できるバージョンと、ストアへ反映されているバージョンとの間にタイムラグがあったりなどした場合、その間はどうすることもできない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;結論から言うと、「AppleのAPIを使ったほうが楽だが、その場合はなにか問題が発生してもどうすることもできない」ということになる。今回は、個人開発者や、規模の小さなアプリで、サーバを設置するのはコストに見合わない場合を想定し、「2.AppleのAPIを利用する方法」の実装を紹介することにした。&lt;/p&gt;
&lt;p&gt;``` {.lang:objc .decode:true title="UpdateChecker.h"}&lt;/p&gt;
&lt;h1&gt;import &lt;Foundation/Foundation.h&gt;&lt;/h1&gt;
&lt;p&gt;@interface UpdateChecker : NSObject&lt;/p&gt;
&lt;p&gt;// 利用中のバージョンより、新しいバージョンのアプリがストアに公開されている場合に、
// ダイアログを表示する。
+ (void)showNeedUpdateAlertIfNeeded;&lt;/p&gt;
&lt;p&gt;@end&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt; &lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;objc&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crayon&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UpdateChecker.m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#import &amp;quot;UpdateChecker.h&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;#import &amp;quot;ApplicationInformation.h&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;// アプリのID。&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;kAppStoreID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;123456789&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@implementation&lt;/span&gt; &lt;span class="nc"&gt;UpdateChecker&lt;/span&gt;

&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;showNeedUpdateAlertIfNeeded&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;getLatestAppVersionAsynchronousWithCompletionBlock&lt;/span&gt;&lt;span class="o"&gt;:^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;latestAppVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 現行のアプリバージョンが、最新のアプリバージョンよりも古い場合(NSNumericSearchでバージョン番号での比較が可能)、&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;latestAppVersion&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;applicationVersion&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;NSNumericSearch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;NSOrderedDescending&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;BOOL&lt;/span&gt; &lt;span class="n"&gt;isAlreadyShow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="c1"&gt;// 通知中でなければ、&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;isAlreadyShow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;isAlreadyShow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="c1"&gt;// メインスレッドで通知を実行する。&lt;/span&gt;
                &lt;span class="n"&gt;dispatch_async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// ダイアログを表示するなど、通知の処理をここに記述。&lt;/span&gt;
                &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// アプリの最新バージョンをAppStoreから非同期で取得する。&lt;/span&gt;
&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;getLatestAppVersionAsynchronousWithCompletionBlock:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="nv"&gt;completionBlock&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;NSURLRequest&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSURLRequest&lt;/span&gt; &lt;span class="n"&gt;requestWithURL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSURL&lt;/span&gt; &lt;span class="n"&gt;URLWithString&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="n"&gt;stringWithFormat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;http://itunes.apple.com/lookup?id=%@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kAppStoreID&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
                                             &lt;span class="nl"&gt;cachePolicy:&lt;/span&gt;&lt;span class="n"&gt;NSURLRequestReloadIgnoringLocalCacheData&lt;/span&gt; &lt;span class="c1"&gt;// キャッシュしない&lt;/span&gt;
                                         &lt;span class="nl"&gt;timeoutInterval:&lt;/span&gt;&lt;span class="mf"&gt;20.0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSURLConnection&lt;/span&gt; &lt;span class="n"&gt;sendAsynchronousRequest&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;
                                       &lt;span class="nl"&gt;queue:&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSOperationQueue&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                           &lt;span class="nl"&gt;completionHandler:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSURLResponse&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSData&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSError&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                               &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                   &lt;span class="n"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;versionSummary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSJSONSerialization&lt;/span&gt; &lt;span class="n"&gt;JSONObjectWithData&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
                                                                                                  &lt;span class="nl"&gt;options:&lt;/span&gt;&lt;span class="n"&gt;NSJSONReadingAllowFragments&lt;/span&gt;
                                                                                                    &lt;span class="nl"&gt;error:&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                                   &lt;span class="n"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;versionSummary&lt;/span&gt; &lt;span class="n"&gt;objectForKey&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;objectAtIndex&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                                   &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;latestVersion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="n"&gt;objectForKey&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                                   &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Latest App Version is %@.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;latestVersion&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                                   &lt;span class="n"&gt;completionBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latestVersion&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                               &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                   &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Fail to Get Latest App Version.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                               &lt;span class="p"&gt;}&lt;/span&gt;
                           &lt;span class="p"&gt;}];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 利用中のアプリのバージョンを取得する。&lt;/span&gt;
&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;applicationVersion&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="p"&gt;[[[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="n"&gt;mainBundle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;infoDictionary&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;objectForKey&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;CFBundleShortVersionString&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;取得するタイミングは悩ましいところではあるが、例えばアプリがフォアグラウンドになる度に取得する場合は、&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{.lang:objc .decode:true title="AppDelegate.m"}
- (void)applicationDidBecomeActive:(UIApplication *)application
{
    // バージョンチェック。
    [UpdateChecker showNeedUpdateAlertIfNeeded];
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;AppDelegate内のコールバックから呼び出すことになる。&lt;/p&gt;
&lt;p&gt;上述の通り、この確認方法は確実ではないので、アプリの最新版の通知がクリティカルな機能である場合は利用しないほうが良いかもしれない。&lt;/p&gt;</summary></entry><entry><title>UnityでiOS向けのビルド時に、RequiredDeviceCapabilityを追加する方法。</title><link href="http://yuseinishiyama.github.io/posts/2013/09/07/addition-to-required-device-capability/" rel="alternate"></link><updated>2013-09-07T21:06:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-09-07:posts/2013/09/07/addition-to-required-device-capability/</id><summary type="html">&lt;p&gt;&lt;a href="https://developer.apple.com/library/ios/documentation/general/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html"&gt;RequiredDeviceCapability&lt;/a&gt;を正しく設定していないと、Appleにリジェクトされてしまうことは、広く知られている。&lt;/p&gt;
&lt;p&gt;例えば、アプリに静止画を撮影する機能がある場合、このRequiredDeviceCapabilityに「still-camera」を追加してやらないといけない。&lt;/p&gt;
&lt;p&gt;RequiredDeviceCapabilityは正しく設定されていなくても、ビルドに失敗しないし、Validationも通過する。だからこそ、リジェクトされてから気づくわけで、こういう作業は特に自動化するメリットが大きいだろう。&lt;/p&gt;
&lt;p&gt;そこで、PostProcessBuildPlayerを利用し、Unityからのビルド時にInfo.plistを書き換えて、RequiredDeviceCapabilityを編集する関数を作成してみた。&lt;/p&gt;
&lt;p&gt;``` {.lang:python .decode:true title="PostProcessBuildPlayer"}
def process_plist(plist_filepath):
    pl = plistlib.readPlist(plist_filepath)
    new_settings = {
        "still-camera"
    }
    if "UIRequiredDeviceCapabilities" in pl:
        pl["UIRequiredDeviceCapabilities"].extend(new_settings)
    else:
        pl["UIRequiredDeviceCapabilities"] = [new_settings]&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;plistlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writePlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plist_filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Info.plistのパスを与えてやると、Info.plistに「still-camera」を追記してくれる。ちなみに&lt;a href="http://docs.python.jp/2/library/plistlib.html"&gt;plistlib&lt;/a&gt;を利用しているので、インポートしておく必要が有る(当たり前のように書いてはいるが、plistlibの存在は今回はじめて知った...)。&lt;/p&gt;</summary></entry><entry><title>Unityでスクリーンショットを撮影し、iPhoneのカメラロールに保存する方法。</title><link href="http://yuseinishiyama.github.io/posts/2013/09/06/screenshot-with-unity-ios/" rel="alternate"></link><updated>2013-09-06T02:55:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-09-06:posts/2013/09/06/screenshot-with-unity-ios/</id><summary type="html">&lt;p&gt;Unityでスクリーンショットを撮るのは非常に簡単である。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.unity3d.com/Documentation/ScriptReference/Application.CaptureScreenshot.html"&gt;Application.CaptureScreenshot&lt;/a&gt;という関数が用意されているからだ。&lt;/p&gt;
&lt;p&gt;だが、この方法ではアプリのデータ領域に画像が保存されるだけなので、ユーザーが、その画像を閲覧できるようにはならない。アプリ内で画像を管理できるようにしてもいいかもしれないが、スクリーンショットを確認したいだけなのであれば、そこまでする必要はないだろう。&lt;/p&gt;
&lt;p&gt;そこで今回は、UnityからiOSのカメラロールにアクセスする方法を紹介する。&lt;/p&gt;
&lt;p&gt;``` {.lang:objc .decode:true}&lt;/p&gt;
&lt;h1&gt;import &lt;Foundation/Foundation.h&gt;&lt;/h1&gt;
&lt;h1&gt;import &lt;AssetsLibrary/AssetsLibrary.h&gt;&lt;/h1&gt;
&lt;h1&gt;import &lt;AVFoundation/AVFoundation.h&gt;&lt;/h1&gt;
&lt;p&gt;/&lt;em&gt; 
 スクリーンショット撮影時に利用するネイティブコード。
 &lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;// 指定したパスの画像をカメラロールに保存する。
extern "C" void _WriteImageToAlbum (const char&lt;em&gt; path)
{
    UIImage &lt;/em&gt;image = [UIImage imageWithContentsOfFile:[NSString stringWithUTF8String:path]];
    ALAssetsLibrary &lt;em&gt;library = [[[ALAssetsLibrary alloc] init] autorelease];
    NSMutableDictionary &lt;/em&gt;metadata = [[[NSMutableDictionary alloc] init] autorelease];
    [library writeImageToSavedPhotosAlbum:image.CGImage metadata:metadata completionBlock:^(NSURL &lt;em&gt;assetURL, NSError &lt;/em&gt;error) {
        // 書き込み終了後、Unity側へコールバック。
        UnitySendMessage("CaptureScreenShot", "DidImageWriteToAlbum", [error.description UTF8String]);
    }];
}&lt;/p&gt;
&lt;p AudioServicesPlaySystemSound_1108_="AudioServicesPlaySystemSound(1108);
" NOTE:_="NOTE:
" _="//" マナーモードや本体音量に左右されずに鳴る。_="マナーモードや本体音量に左右されずに鳴る。
"&gt;// システムのシャッター音を鳴らす。
extern "C" void _PlaySystemShutterSound ()&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;このネイティブコードをファイルの拡張子を&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Objective&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="err"&gt;の拡張子&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;にして&lt;/span&gt;&lt;span class="n"&gt;StreamingAssets&lt;/span&gt;&lt;span class="err"&gt;内に配置しておけば、そのまま&lt;/span&gt;&lt;span class="n"&gt;Xcode&lt;/span&gt;&lt;span class="err"&gt;のプロジェクトに追加される。&lt;/span&gt;

&lt;span class="err"&gt;さて、&lt;/span&gt;&lt;span class="n"&gt;Unity&lt;/span&gt;&lt;span class="err"&gt;のスクリプトから、このファイルの関数を呼び出すわけだが、&lt;/span&gt;&lt;span class="n"&gt;writeImageToSavedPhotosAlbum&lt;/span&gt;&lt;span class="err"&gt;での書き込みは非同期で行われるので、&lt;/span&gt;&lt;span class="n"&gt;Unity&lt;/span&gt;&lt;span class="err"&gt;側へコールバックを返したい。そこで、&lt;/span&gt;&lt;span class="n"&gt;Unity&lt;/span&gt;&lt;span class="err"&gt;側の関数を呼び出すことができる、&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UnitySendMessage&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt;&lt;span class="err"&gt;を利用する。&lt;/span&gt;&lt;span class="n"&gt;UnitySendMessage&lt;/span&gt;&lt;span class="err"&gt;は第&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;引数にオブジェクト名、第&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;引数に関数名、第&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;引数に呼び出す関数の引数をとる。&lt;/span&gt;

&lt;span class="err"&gt;また、&lt;/span&gt;&lt;span class="n"&gt;iOS&lt;/span&gt;&lt;span class="err"&gt;標準のスクリーンショット機能のように、シャッター音が鳴るようにしたいので、システムのシャッター音を鳴らす関数&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;_PlaySystemShutterSound&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;を作成した。おそらく、カメラからの入力がある状態でスクリーンショットを撮られることを考慮してシャッター音がなるようにしているのであろう。最近は&lt;/span&gt;&lt;span class="n"&gt;AR&lt;/span&gt;&lt;span class="err"&gt;等でカメラを使うことも多く、その場合はキャプチャ時にシャッター音が実装されていなければ高確率でリジェクトされるであろう。&lt;/span&gt;

&lt;span class="err"&gt;次は、スクリプト側の実装だ。&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CaptureScreenshot.cs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Collections&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InteropServices&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;CaptureScreenshot&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MonoBehaviour&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

     &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;ScreenshotFilename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;src.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cp"&gt;#if  UNITY_IPHONE &amp;amp;&amp;amp; !UNITY_EDITOR&lt;/span&gt;
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DllImport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;__Internal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
     &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;_PlaySystemShutterSound&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DllImport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;__Internal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
     &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;_WriteImageToAlbum&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

     &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;CaptureScreenShot&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// ネイティブコードからシャッター音を再生。マナーモード時や、ボリュームオフ時もシャッター音を再生したいため。&lt;/span&gt;
          &lt;span class="n"&gt;_PlaySystemShutterSound&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="c1"&gt;// スクリーンショットを撮影。Documents下に保存される。&lt;/span&gt;
          &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaptureScreenshot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temporaryScreenshotFilename&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="c1"&gt;// スクリーンショットが書き込まれるまで待つ。書き込み完了後、画像をカメラロールへ保存する。&lt;/span&gt;
          &lt;span class="n"&gt;StartCoroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WaitUntilFinishedWriting&lt;/span&gt; &lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;_WriteImageToAlbum&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TemporaryScreenshotPath&lt;/span&gt;&lt;span class="p"&gt;());}));&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="c1"&gt;// スクリーンショットの画像が一時的に保存されるパス。&lt;/span&gt;
     &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;TemporaryScreenshotPath&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;persistentDataPath&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;temporaryScreenshotFilename&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="c1"&gt;// スクリーンショットの書き込みが終了するまで、毎フレームファイルの有無を確認する。&lt;/span&gt;
     &lt;span class="n"&gt;IEnumerator&lt;/span&gt; &lt;span class="nf"&gt;WaitUntilFinishedWriting&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Action&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exists&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TemporaryScreenshotPath&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Temporary Screenshot have not been written yet.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
               &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Temporary Screenshot have been Written.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="c1"&gt;// カメラロール保存後、ネイティブ側から呼び出される。&lt;/span&gt;
     &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;DidImageWriteToAlbum&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;errorDescription&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsNullOrEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errorDescription&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Image have been Written To Album Successfully.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
               &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Delete Temporary Screenshot.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
               &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delete&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TemporaryScreenshotPath&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; An Error Occured. Error Description is...&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;errorDescription&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#else&lt;/span&gt;
     &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;CaptureScreenShot&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="c1"&gt;// Android端末での処理等。&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こちらは少しややこしいので補足しておく。&lt;/p&gt;
&lt;p&gt;``` {.lang:c# .decode:true}
[DllImport("__Internal")]
private static extern void _PlaySystemShutterSound ();
[DllImport("__Internal")]
private static extern void _WriteImageToAlbum (string path);&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DllImport&lt;/span&gt;&lt;span class="err"&gt;を使い、呼び出されるネイティブコードのシグネチャを宣言する。&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;IEnumerator&lt;/span&gt; &lt;span class="n"&gt;WaitUntilFinishedWriting&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Action&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exists&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TemporaryScreenshotPath&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Temporary Screenshot have not been written　yet.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Temporary Screenshot have been Written.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;コルーチンを利用し、画像がディスクに書き込まれるまで、毎フレームファイルの有無をチェックし、画像の存在が確認でき次第コールバック(ここではカメラロールへの保存)を実行する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{.lang:c# .decode:true}
void DidImageWriteToAlbum (string errorDescription) {
    if (string.IsNullOrEmpty(errorDescription)) {
        Debug.Log("&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Image have been Written To Album Successfully.");
        Debug.Log("&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Delete Temporary Screenshot.");
        System.IO.File.Delete (TemporaryScreenshotPath());
    } else {
        Debug.Log("&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; An Error Occured. Error Description is..." + errorDescription);
    }
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;こちらは、カメラロール保存後に前述のUnitySendMessageによって呼び出される関数だ。&lt;a href="http://docs.unity3d.com/Documentation/ScriptReference/Application.CaptureScreenshot.html"&gt;Application.CaptureScreenshot&lt;/a&gt;は画像をDocuments内に保存するが、&lt;a href="https://developer.apple.com/jp/devcenter/ios/library/documentation/FileSystemProgrammingGuide.pdf"&gt;一時ファイルをDocuments内に置いてはいけないことになっている&lt;/a&gt;ので、すぐに削除している。&lt;/p&gt;
&lt;p&gt;実装するコードは以上である。&lt;/p&gt;
&lt;p&gt;また、AssetsLibraryを利用しているため、フレームワークを追加する必要がある。Xcodeから手動で追加しても良いし、&lt;a href="http://docs.unity3d.com/Documentation/Manual/BuildPlayerPipeline.html"&gt;PostProcessBuildPlayer&lt;/a&gt;にフレームワークを追加するコードを記述しても良い。このあたりはネット上で割りと簡単に情報が見つかるのでそちらを参考にしてほしい。&lt;/p&gt;</summary></entry><entry><title>Raspberry Piのセットアップ(NOOBS)。</title><link href="http://yuseinishiyama.github.io/posts/2013/08/31/setup-raspberrypi/" rel="alternate"></link><updated>2013-08-31T21:08:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-08-31:posts/2013/08/31/setup-raspberrypi/</id><summary type="html">&lt;p&gt;購入してからしばらく放置していたRaspberry Piをセットアップしてみる。&lt;/p&gt;
&lt;p&gt;今のところRaspberry
Piでやりたいことはないから、セットアップするに足る目的もないけどなぁ、などと思いつつ作業を開始する。すると、どうしたことか全然上手くいかないので、セットアップすることが目的になって、Raspberry
Piが起動した時には、なんとも言えない達成感が・・・。セットアップとは得てして、このような性質を持った作業である。&lt;/p&gt;
&lt;p&gt;さて、私の「セットアップ観」など何の役にも立たないので、私がセットアップの際に困った事を展開したい。&lt;/p&gt;
&lt;p&gt;まずインストールするOSをダウンロードするために、下記サイトを見る。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.raspberrypi.org/downloads"&gt;http://www.raspberrypi.org/downloads&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;「初心者はNOOBSを利用してOSをインストールするのが、おすすめ」ということなので、それに従う(ちなみにnoobは「新参者」という意味らしい)。「俺は利口だから中級者以上の扱いで頼むぜ」という感じで臨んで、マニュアルで色々やろうとしたら散々な結果になった、などということはぜひとも避けたい。&lt;/p&gt;
&lt;p&gt;さて、Transcendの8GB(Class10)のSDカードをフォーマットし、そこにNOOBSのファイルを突っ込み、Raspberry
Piを起動した。&lt;/p&gt;
&lt;p&gt;しかし、画面に何も表示されない。よくみると「ACT」のLEDが消灯しているので、それを手がかりに調べてみる。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://elinux.org/R-Pi_Troubleshooting"&gt;http://elinux.org/R-Pi_Troubleshooting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上記のサイトによると、ACTはSDカードのステータスらしい。これは、所謂「&lt;a href="http://elinux.org/RPi_SD_cards"&gt;SDカードの相性問題&lt;/a&gt;」かと思い、別のSDカード(TOSHIBA)のもので試す。が、これも同じ結果。無念、Raspberry
Piは屋根裏行きかなと思ったものの、さすがに本体・入門用書籍・SDカードx2の代金を捨てるのはあまりに勿体ないので、もうちょっと調べてみる。すると、気になる投稿を見つけた。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.raspberrypi.org/phpBB3/viewtopic.php?t=48389&amp;amp;p=378706"&gt;http://www.raspberrypi.org/phpBB3/viewtopic.php?t=48389&amp;amp;p=378706&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;by &lt;strong&gt;&lt;a href="http://www.raspberrypi.org/phpBB3/memberlist.php?mode=viewprofile&amp;amp;u=14062"&gt;mahjongg&lt;/a&gt;&lt;/strong&gt; » Fri Jun 28, 2013 12:26 am&lt;/p&gt;
&lt;p&gt;Okay, my bad, I suddenly realized you didn't make any install yet, and
config.txt is (only) installed after you choose to install a linux
variant. config.txt doesn't exist on the card until then.&lt;/p&gt;
&lt;p&gt;the NOOBS menu itself shouldn't need config.txt, as it uses the most
elementary VGA format that any (VGA) monitor should be able to display.&lt;/p&gt;
&lt;p&gt;By default, NOOBS 1.2 will try to output over HDMI at your display's
preferred resolution. If you do not see any output on your HDMI display
or are using the composite output, you can manually select a different
output mode by pressing one of the following number keys on your
keyboard;&lt;/p&gt;
&lt;p&gt;​1. HDMI preferred mode - this is the default display mode for NOOBS.&lt;br /&gt;
2. HDMI safe mode - select this mode if your display is connected to
the Pi's HDMI connector and you cannot see anything on screen after the
Pi has booted.&lt;br /&gt;
3. Composite PAL mode - select either this mode or composite NTSC mode
if you are using the composite RCA video connector on the Pi&lt;br /&gt;
4. Composite NTSC mode&lt;/p&gt;
&lt;p&gt;So in your case you will need to boot the Pi, wait for a second or so,
then press either 3 or 4 until you get a display on your monitor.&lt;/p&gt;
&lt;p&gt;You can tell that your keypress has been registered as the green ACT LED
will turn on after the key has been pressed before switching off once
the display mode has been changed. If you still do no see a display
after the LED goes off then try another mode.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;私も同じくVGAのディスプレイに出力していた。どうやらNOOBSをVGA出力で起動する場合にはキーボードのキーを押して、出力モードを選択しないといけないようだ。試しにキーボードの1を押してみる。すると、NOOBSのセットアップ画面が表示されたではないか！ということで、SDカードの問題ではなく、VGA出力が問題であったことが発覚した。こうして、無事にNOOBSからRaspbian
“wheezy”をインストールすることができたのだが、ここで再度つまずいた。OS起動後、またもや画面が表示されないのである。だが、VGAが問題であることは分かっているので、再度調べてみる。すると、こういう記事を発見した。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://nomolk.hatenablog.com/entry/2013/03/28/234247"&gt;http://nomolk.hatenablog.com/entry/2013/03/28/234247&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この記事と、記事のリンクにあるtwitterの投稿を参考にして、config.txtを編集し、最終的に、&lt;/p&gt;
&lt;p&gt;hdmi_safe=1&lt;br /&gt;
hdmi_drive=2&lt;/p&gt;
&lt;p&gt;という設定にすることで、画面が出力された。こうして、ゆとりプログラマー(noob)はハードウェアの手痛い洗礼を受けながらも、無事にRaspberry
Piをセットアップすることができたのである。&lt;/p&gt;
&lt;p&gt;VGA出力にしている人は参考にしていただきたい。&lt;/p&gt;</summary></entry><entry><title>iOS向け動画編集アプリ「Findays」をリリースしました。</title><link href="http://yuseinishiyama.github.io/posts/2013/08/31/findays-released/" rel="alternate"></link><updated>2013-08-31T19:51:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-08-31:posts/2013/08/31/findays-released/</id><summary type="html">&lt;p&gt;[![findays_icon][]][]&lt;/p&gt;
&lt;p&gt;今月16日(金)に、開発を1人で担当したiOS向けアプリ「Findays」がリリースされました。以下、App
Storeに記載されている内容の一部転載です。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;【Findaysとは】  &lt;/p&gt;
&lt;p&gt;Findays（ファインデイズ）は30秒の動画を撮影して、オープニング／エンディングアニメを付けたり、フィルター、
音楽を選択して、PVのような作品を作ってくれるアプリです。BGMを提供してくれたのは。日本を代表するミュージシャン、
mito(clammbon)、toe、mouse on the keys、Kazuhide Takamoto(Comeback My
Daughters)の４組。日常の瞬間を切り取って特別な思い出に変えよう！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最新の情報はFacebookでゲットしよう -  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;撮影した動画をアップするとプレゼントがもらえるキャンペーンなどが開催されたり&lt;br /&gt;
ミュージシャンが曲のコンセプトなどを語ったメッセージビデオも観れます。&lt;br /&gt;
Official Facebook Page&lt;br /&gt;
&lt;a href="https://www.facebook.com/FindaysApp"&gt;https://www.facebook.com/FindaysApp&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Findaysの使い方はYoutubeでチェック -&lt;br /&gt;
Official Youtube Page&lt;br /&gt;
&lt;a href="http://www.youtube.com/user/findaysofficial"&gt;http://www.youtube.com/user/findaysofficial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;是非ダウンロードしてご利用くださいませ。&lt;br /&gt;
&lt;a href="https://itunes.apple.com/jp/app/findays/id681034183?mt=8"&gt;https://itunes.apple.com/jp/app/findays/id681034183?mt=8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[![findays_icon][]]: https://itunes.apple.com/jp/app/findays/id681034183?mt=8&lt;/p&gt;</summary></entry><entry><title>きっと、うまくいく</title><link href="http://yuseinishiyama.github.io/posts/2013/08/19/3idiots/" rel="alternate"></link><updated>2013-08-19T17:18:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-08-19:posts/2013/08/19/3idiots/</id><summary type="html">&lt;p&gt;映画『きっと、うまくいく(3idiots)』を見た。&lt;/p&gt;
&lt;p&gt;序盤は、ボリウッド特有の唐突なミュージカルシーンと、とてつもなく大味の筋書きに慣れなかった。しかし、終わってみると、伏線もきれいに回収され、結末もすがすがしく、前評判通りの快作だったといえよう。&lt;/p&gt;
&lt;p&gt;ランチョーという主人公を通して明らかにされる、この作品のメッセージは「誠実さ」に尽きる。彼は納得のいかないことをそのまま放置することが出来ず、しがらみに縛られて不誠実な行動をとる人間にひたすら突っかかる。この彼のお節介が、様々の愉快な事件を巻き起こし、また周囲の人々を変えていく。&lt;/p&gt;
&lt;p&gt;勇気をもらえた一方で、どうしても違和感が拭い去れなかった。&lt;/p&gt;
&lt;p&gt;主人公ランチョーはの人間像は理想的だ。彼は、このようにありたいと思うと同時に、そのようにあろうとできる。一方で、ランチョーの周りの人々はとても現実的だ。彼らはインドという国に住みながらも、抱えている問題は我々日本人とほとんど変わらない。彼らの抱える問題は、&lt;/p&gt;
&lt;p&gt;親の希望と自分の希望が乖離していること&lt;br /&gt;
宗教を盲信してしまうこと&lt;br /&gt;
貧乏な家族の生活を背負っていること&lt;br /&gt;
他人の期待に必要以上に答えようとしてしまうこと&lt;/p&gt;
&lt;p&gt;など、万国共通の問題である。ランチョーはこうした問題を抱える人間に、自分に正直に生きるように勧める。ではなぜランチョ―はしがらみから開放され、自由に振る舞うことができるのか。それは、「本当に」彼にしがらみがないからに他ならない。&lt;/p&gt;
&lt;p&gt;ランチョーには家族がいない。また、彼は家庭を持とうとしない。エンディングでついにランチョ―はヒロインと結ばれるが、それまで彼は不自然なほど彼女との生活を拒んできた。ヒロインとの結婚はハッピーエンドのためには必要であったが、ランチョ―の非現実的な人物像には相応しくない。ヒロインは婚約者を捨て、10年ぶりに出会ったらランチョーと結婚するという異常な行動をとるが、これはランチョ―と結婚のミスマッチとハッピーエンドの間のギャップを解消するための強引な策ともとれる。&lt;/p&gt;
&lt;p&gt;内田樹は「哀しみの平成無責任男」というエッセイで『ニッポン無責任時代』の植木等と『踊る大捜査線』の青島俊作を例に出し、トリックスター特有の非現実性を見事に説明した。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TVシリーズで織田裕二君が演じた青島俊作君は、湾岸署の小市民的な同僚たち（今回も相変わらず快調）と、本庁のエリートたちとの出口のないコミュニケーション不全に爽やかな風穴をあける「ヘラヘラ刑事」であった。この青島刑事がかつて「無責任シリーズ」で植木等が演じた、何ものにも束縛されない「お気楽サラリーマン」の直系の後継者なのだということに、今回映画を見てはじめて気がついた。『ニッポン無責任時代』の植木等には、帰る故郷も、骨を埋める社会も、養うべき家族も、ご機嫌を伺う恋人も、兄弟仁義で結ばれた友人も、なんにもない。だからいかなる権力も誘惑も彼をコントロールすることができない。彼が求めるものはただ一つ。自由である。無責任男は高らかに笑い、振り向きもせずに歩きさる。（中略）この「私生活の完全な消去」を代償にして青島刑事はかろうじてその行動の自由を確保していたのである。年金やローンや家族のしがらみに呪縛された同僚たちと比べると、彼には失うものがなかった（少なくとも、彼が「失うかもしれないもの」は私たちには知らされていなかった)。(内田樹著『態度が悪くてすみません』より)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;内田樹の言う「私生活の完全な消去」はそのままランチョーにあてはまる。我々は、植木等や、青島俊作や、ランチョーではない。つまり我々は私生活を持ったしがらみだらけの人間である。この映画は、自分のあり方を自分で決定することのできる理想の人間像を上手く描いている一方で、彼の私生活を抹消してしまったがために「では我々はどうすればいいのか」という哲学的な問の解決には完全に失敗している。&lt;/p&gt;
&lt;p&gt;このようにランチョーの人物像は非現実的であるが、私はこの非現実的な人物像を例外的に現実にした人物を知っている。それは物理学者リチャード・P
・ファインマンだ。ファインマンとランチョーの間には以下の様な類似性が認められる。&lt;/p&gt;
&lt;p&gt;画一的な教育に対する不信感&lt;br /&gt;
権威主義を執拗に攻撃する態度&lt;br /&gt;
楽観主義&lt;br /&gt;
現場主義&lt;/p&gt;
&lt;p&gt;類似性は性質だけにとどまらない。誰もが知るように、彼もランチョーと同じく科学の世界で大成した。ランチョーよりも、ファインマンのほうが実在する人物であるだけに、その生き方を参考にしやすいだろうか。否、彼とてランチョーと同じ非現実性を有している。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;いくら人が僕はこういう成果をあげるべきだと思いこんでいたって、その期待を裏切るまいと努力する責任などこっちにはいっさいないのだ。そう期待するのは向こうの勝手であって、僕のせいではない（R.P.ファインマン著『ご冗談でしょう、ファインマンさん』より）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ファインマンの自由奔放な性格・行為を支えているのはこうした無責任であった（実際彼は同書の中で、自分の思想に「社会的無責任」とうものを挙げている）。何にも縛られていない人間は確かに魅力的だ。思うままに行動し、あっという間に凡人を抜き去り高みに登る。そこを目指すことは何も悪いことではないし。そういう人間が偉業を成し遂げ、人々に勇気を与えることも事実だ。だが、しがらみに縛られた人間を不自由な人間として描き、それを解放しようとする行為を賞賛するのはどうも間違っているように思う。&lt;/p&gt;
&lt;p&gt;この映画を見て勇気づけられた人間も、映画が終わった途端に再びしがらみだらけの世界に戻る。もし、そこで一念発起して、「今日から何ものも俺を束縛できない」と言えるのであれば、おそらく元から「無責任」な人間であったのだ。「責任感」、悪く言えば「しがらみ」を抱えた人間が自分を呪う必要はない。自由である代償は無責任であり、おそらく無責任は誰かを不幸にする。皆が無責任であれば、社会は機能しない。責任を負いながら生きている人間も必要であり、そういう人間を不幸とする人生観こそが誤りだ。責任感のある人間はそれを誇りに思わなければいけない。&lt;/p&gt;</summary></entry><entry><title>クインシー・ジョーンズ来日</title><link href="http://yuseinishiyama.github.io/posts/2013/08/08/quincy-live-in-japan/" rel="alternate"></link><updated>2013-08-08T09:34:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-08-08:posts/2013/08/08/quincy-live-in-japan/</id><summary type="html">&lt;p&gt;クインシー・ジョーンズ生誕80年を記念して、&lt;span
style="line-height: 1.5;"&gt;32年ぶりにQが日本のステージに立った。&lt;/span&gt;そんな訳で、私も去る7月31日、東京国際フォーラムに赴いた。&lt;/p&gt;
&lt;p&gt;どういう訳か、日本人アーティストの演奏が全体の半分ぐらいを占めている。トリビュートパートと呼ばれており、亀田誠治がプロデュースしているらしい。&lt;br /&gt;
その出演者は&lt;/p&gt;
&lt;p&gt;綾香・小曽根真・小野リサ・K・ゴスペラーズ・BoA・三浦大知・土岐麻子&lt;/p&gt;
&lt;p&gt;という混迷っぷりだから、見る前から少し不安であった。&lt;/p&gt;
&lt;p&gt;&lt;span
style="line-height: 1.5;"&gt;ちなみに、メインであるクインシー・ジョーンズのパートは、&lt;/span&gt;いわゆる「クインシーの秘蔵っ子」が次々と出演するという構成。しかも超若手の、見聴きしたことのない出演者ばかりで、こちらも同じく不安であった。&lt;/p&gt;
&lt;p&gt;ライブレポートを書くのであれば、司会のクリスペプラーの登場から&lt;span
style="line-height: 1.5;"&gt;時系列順に内容を追っていくべきなのだろうが、そういうつもりもないので&lt;/span&gt;&lt;span
style="line-height: 1.5;"&gt;結論から言おう。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;ライブ自体は「かなり迷走していた」と言わざるを得ない。&lt;/p&gt;
&lt;p&gt;日本人のトリビュートパートはクインシーがアレンジした曲や、プロデュースした曲を中心に披露していた。これらは、正直あまり聴けたものではなかった。もちろん、「日本人だから、とか、そのアーティストに興味がないとか、そういう理由で&lt;span
style="line-height: 1.5;"&gt;バイアスがかかって純粋な評価を下せないのではないか」と、問われたら、否定する自信はない。&lt;/span&gt;だが、クインシーを見に来たファンにとっては、こういうネガティブな感想があたり前ではないだろうか。なにせ、クインシーのカバーだ。大ヒット曲だけに、様々な人の無数の思い出と結びついている。そういう曲をカバーすることがどれだけ重く、また難しいことか、そんなことぐらいはプロであれば当然予想していて然るべきである。&lt;/p&gt;
&lt;p&gt;圧倒的にアウェイなのだ。普通に演奏した所で、「お前を見に来たわけじゃない。クインシーの曲を汚すな。」そう思われるのが目に見えている。確かにミュージシャン同士であれば、そういうアウェイに立たされる者に同情し耳を傾けるかもしれない。だが、全ての観客に同情を求めるのはプロ失格だ。&lt;/p&gt;
&lt;p&gt;何が言いたいかと言うと、「余程素晴らしい演奏」でなければ観客の心を掴めないステージで、凡庸なパフォーマンスを披露したアーティストが多かったということだ。&lt;/p&gt;
&lt;p&gt;そんな中でも、例外的に、「聴いてしまった」アーティストが２人いる。&lt;/p&gt;
&lt;p&gt;１人はK だ。それまで、名前を聞いたこともなかった。そんな彼が「One
Hundred Ways」を演奏すると聞いて、心底ヒヤヒヤした。「One Hundred
Ways」でのジェームス・イングラムの歌は奇跡的に素晴らしい。歌いあげてしまいそうなところを、そうはせずに1フレーズずつ丁寧に歌う。聴き慣れていても、一緒に歌おうとするとディテールが細かすぎて一緒に歌えない。名曲にはよくあることだ。Kが歌うと聞いて少しがっかりした。ジェームス・イングラムの歌が聴きたかったのに、と思ってしまった。&lt;/p&gt;
&lt;p&gt;しかし、彼がイントロのピアノを弾きはじめた途端、空気がガラリとかわった。ジャズやその他ブラック・ミュージックに理解がある、そういう演奏だった。歌にしても、ジェームス・イングラムのそれとは違う、また別の上手さがあった。モノマネやカラオケではない、対象の曲を自分のものにしていなければできないパフォーマンスだった。&lt;/p&gt;
&lt;p&gt;そして、もう1人の例外は、もちろん小曽根真だ。&lt;/p&gt;
&lt;p&gt;Kにしてもそうだが、ある音楽を真に敬愛しているということは、その音楽が生まれた土壌や、精神を理解しているといことだ。だから、その理解した根っこさえ示すことができれば、同じ楽曲を演奏しなくても十分に敬愛を表現することができる。&lt;/p&gt;
&lt;p&gt;だから、小曽根真はクインシーへの敬愛を示すために「自分のジャズ」を演奏した。それも、No
Name
Horsesという日本屈指のビッグバンドには短すぎると言わざるを得ない、たった2曲のセットリストの中で本気の演奏を見せつけた。誰とは言わないが、日本人アーティストの即席ジャズバンドとは比べ物にならない本物のジャズであった。セッションミュージシャンのジャズは&lt;/p&gt;
&lt;p&gt;「ライドをこういう風にたたくとジャズになる」&lt;/p&gt;
&lt;p&gt;とか&lt;/p&gt;
&lt;p&gt;「ベースを4分で弾くとジャズになる」&lt;/p&gt;
&lt;p&gt;とかといった、浅はかさがどうしても透けてしまう。当たり前だが、小曽根のようなジャズの前線にいるミュージシャンの演奏はそうではない。&lt;/p&gt;
&lt;p&gt;「これがジャズだ」&lt;/p&gt;
&lt;p&gt;と言わんばかりの演奏をする。そして、そういう風な音楽でなければ、ジャズにならない。ジャズをジャズたらしめているのは、音楽の種類、楽曲の構造、楽器の編成ではなく、その精神なのである。だから、セッションミュージシャンのように、ただ単にジャズの構造で演奏してもジャズに聴こえないのだ（カフェや歯医者でかかっている、ポップスのボサノバアレンジがボサノバに聴こえないのも同じ理由だろう）。&lt;/p&gt;
&lt;p&gt;私の考えるジャズ、それは「自己否定」だ。&lt;/p&gt;
&lt;p&gt;ジャズは間違いなく、その遺伝子に自己否定を組み込まれている。ジャズは演奏したその場からジャズではなくなる。過去の演奏は「ジャズであった音楽」であり、決して「ジャズである音楽ではない」。ジャズは、「ジャズを解体することがジャズ」というパラドックスを内包している。いまや、ジャズの代名詞である、チャーリー・パーカーやマイルス・デイビスやビル・エバンスだって、当時は一番新しく、一番尖っていたからジャズを代表するに至ったのだ。月並みの表現ではあるが、やはり、彼らが私達と同世代にいれば、また別の音楽を演奏したであろう。&lt;/p&gt;
&lt;p&gt;そういう意味で小曽根真の演奏は「ジャズ」そのものであった。ジャズは誰かの過去を再現するものではない。彼の音楽は、他の誰かが演奏したものとははっきりと区別できるオリジナリティがあった。&lt;/p&gt;
&lt;p&gt;さて、続くクインシーのパートであるが、随分と感想が長くなってしまったので、メインのステージではあるが、短くまとめよう。言いたいことはだいたい言ってしまった。&lt;/p&gt;
&lt;p&gt;クインシーのパートは、まだまだこれから、という感じのアーティストが多かった。ジェームス・イングラムやパティ・オースティン（そして、日本の某国民的歌手・・・）を見ることができたが、全体として、ファンの懐古的精神を十分に満たすような内容ではなかっただろう。&lt;/p&gt;
&lt;p&gt;しかし、真のジャズはいつでも懐古的な感情を裏切るものである。クインシーも過去に囚われない人間であるから、これだけの長い間音楽の世界に君臨し、とても1人の人間がカバーできるとは思えない領域で作品を残すことができたのである。だから、クインシーの名曲ばかりを聴きたかったと不満に思うと同時に、クインシーはまだ前に進もうとしているのかと嬉しく思いもした。きっとクインシーは前向きで明るい人間だろうけれど、少なくとも音楽に関しては厳しい自己否定をしているに違いない。&lt;/p&gt;
&lt;p&gt;どんなにプロデューサーや編曲家としての功績が大きくても、やはり私にとってクインシー・ジョーンズは紛れもなく「ジャズマン」だった。&lt;/p&gt;</summary></entry><entry><title>自己矛盾との付き合い方</title><link href="http://yuseinishiyama.github.io/posts/2013/07/21/cope-with-self-contradiction/" rel="alternate"></link><updated>2013-07-21T20:27:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-07-21:posts/2013/07/21/cope-with-self-contradiction/</id><summary type="html">&lt;p&gt;先日、岡本太郎美術館へ行った。&lt;/p&gt;
&lt;p&gt;正直なところ絵には疎い。全くのデタラメを抽象画といわれて、納得してしまうことは充分ありえる。そして、仮にそれが美術館に置いてあったとして、その絵の前で手を組んで頷いたりしてしまったら、これほど滑稽なことはない。だから、岡本太郎が描くような抽象画にもある程度距離をおいて対峙したところ、次々と矛盾した感想が頭をもたげてきた。&lt;/p&gt;
&lt;p&gt;やっぱりこんなのはデタラメだ。  &lt;/p&gt;
&lt;p&gt;⇔デタラメに見えるが、一貫したモチーフがあるように思う。解説によると、考えぬかれた構図があるらしい。&lt;/p&gt;
&lt;p&gt;親も金持ちで、パリに留学している。結局、金か。  &lt;/p&gt;
&lt;p&gt;⇔岡本太郎がフランス語でしゃべっている映像が展示されていた。かなり努力したのでは。&lt;/p&gt;
&lt;p&gt;もし、これが適当だとしたら、全く無価値だ。  &lt;/p&gt;
&lt;p&gt;⇔これだけバカでかくて派手な色の作品だとどうしても気になってしまう。気になるということはそれだけで価値があるのでは。&lt;/p&gt;
&lt;p&gt;アバンギャルドな人だ。&lt;br /&gt;
⇔TVに出演し、大衆に迎合した人だ。&lt;/p&gt;
&lt;p&gt;画の練習などしなくてもこんな画は描けそうだ。&lt;br /&gt;
⇔かなり立派な肖像画も描いている。&lt;/p&gt;
&lt;p&gt;いったいどうしてこれほど評価を定めることが出来ないのかと困惑していると、それに答えるかのように、岡本太郎の芸術理論を紹介している動画の中で、こんな言葉にぶつかった。&lt;/p&gt;
&lt;p&gt;「矛盾を矛盾のまま書きだすのだ。」&lt;/p&gt;
&lt;p&gt;ああ、そうか。と、これで全てが納得いった。なんてことはない、私が最も大事だと思っている考えを岡本太郎は体現したわけだ。&lt;/p&gt;
&lt;p&gt;私は同じ考えを「自己矛盾を解消してはならない」というポリシーとして所持していた。&lt;/p&gt;
&lt;p&gt;自分を割り切るというのは魅力的な考えだ。例えば、こんなふうに。&lt;/p&gt;
&lt;p&gt;「私は社交的な人間です。人と接することが何よりも好きです。」&lt;br /&gt;
「私はいついかなるときもリーダーシップを発揮する人間です。」  &lt;/p&gt;
&lt;p&gt;「私は凝り性です。どんなことも原因が分かるまで追求しなければ気がすみません。」&lt;/p&gt;
&lt;p&gt;自分がどういう人間かについて考えることは重要である。そして、他人に自己紹介するときに「実を言うと自分というものがよく分からないんです...」などと言えば困惑されてしまうから、上記のように言うほうが遥かに効果的なことが多い。どこか、就職活動の定形フレーズに似ているのは偶然ではないだろう。&lt;/p&gt;
&lt;p&gt;だが、魅力的であると同時に、非常に危険な考えでもある。自分が「本当に」そういう人であり、そういう人になったのも必然であると考えてしまう可能性があるからだ。「自分の戦略」と「自分の実体」を混同してはならない。&lt;/p&gt;
&lt;p&gt;社交的だと自称する人が、対人関係でいつも愚痴を言っている。&lt;br /&gt;
リーダーシップがあると自称する人が、突然責任を放棄する。&lt;br /&gt;
凝り性を自負する人がある分野に関しては全く無頓着である。&lt;/p&gt;
&lt;p&gt;こんなことは日常茶飯事だ。それに、こういうことを攻めてはいけない。一貫性というのは常に期待されることではあるが、また同時に常に不可能である。親が死んでも特に何も感じなかったムルソー(注1)を人間味がないとみなすのは、一貫性の悲劇としか言いようがない。&lt;/p&gt;
&lt;p&gt;誰しも自己矛盾を抱え込んでいる。バグまみれの人間に&lt;a href="http://ja.wikipedia.org/wiki/%E5%8F%82%E7%85%A7%E9%80%8F%E9%81%8E%E6%80%A7"&gt;参照透過性&lt;/a&gt;など期待してはいけない。そして、そのバグが人間味そのものではないのか。確かに自己矛盾は辛い。例えば、&lt;/p&gt;
&lt;p&gt;「昔は人の言うことを全く聞かなかったが、最近は人の意見を考慮するようになった。」&lt;/p&gt;
&lt;p&gt;という人間を仮定する。そこから、&lt;/p&gt;
&lt;p&gt;「私は人の意見を取り入れる柔軟な人間です。」&lt;/p&gt;
&lt;p&gt;という結論を導き出し、これからもそのように生きてくと決めれば、それはとても脳にやさしい。だが、これはひとつの可能性にすぎず、別の可能性もある。それは、&lt;/p&gt;
&lt;p&gt;「柔軟なことはいいことなのか。最近、丸くなったといわれるが、それは裏を返せば独創性が無いということではないのか。」&lt;/p&gt;
&lt;p&gt;というような問いを自分に投げかける可能性だ。そうすると、&lt;/p&gt;
&lt;p&gt;「私は柔軟になったが、それだけではいけないのでやはり安易に人の意見を聞くのはやめよう。」&lt;/p&gt;
&lt;p&gt;という結論が得られるが、今度は&lt;/p&gt;
&lt;p&gt;「やはり、自分の意見ばかりを押し通してばかりいれば信頼を得ることは出来ない。もう少し柔軟にならないといけないのではないか。」&lt;/p&gt;
&lt;p&gt;という問いが生じて、堂々巡りになる。こうした宙ぶらりんの状態は、自分の割り切れなさに対する問いが無限に繰り返される状態であり、脳にやさしくない。やさしくはないが、この「どちらでもなさ」こそがまさに自分であり、それと向きあわねばならないのである。&lt;/p&gt;
&lt;p&gt;岡本太郎の魅力は、自己矛盾と向き合った結果生まれたミスティフィケーションにある。「こういう人だな」と思ったとたん「そうでもない」とも思わされ、いつもすんでのところでひらりと身をかわされる。結局、なにも断定できないまま、その矛盾だけを見せつけられる。この態度は、アルベール・カミュの思想と一致している。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不条理に直面した状態を、意味を求めるときに生じた矛盾との対立であるとし、理性をもつ種である人間が直面する問題とした。不条理を悟ったり気づくことは個人に３つの選択をもたらす。自殺、宗教などへの盲信、不条理の認識である。彼は不条理を受け入れることが生き続ける唯一の方法としている。(&lt;a href="http://ja.wikipedia.org/wiki/不条理"&gt;Wikipedia「不条理」より&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(カミュの思想は「不条理」ということばで紹介されることが多いが、これは大変な誤解を生むから、こうしたキーワードと人物との結びつけはぜひとも辞めるべきだ。「不条理」ということばのもつ、虚無的な響きと彼の思想は全く異なっている。彼の思想は「不条理から目を背けないという『反抗』」を基礎とした、生きるための強く前向きな思想なのである。)&lt;/p&gt;
&lt;p&gt;カミュは矛盾から目をそらし、宗教などを盲信することを「哲学的自殺」といったそうだが、「自分を割り切る行為」も当然自殺にあたるだろう。&lt;/p&gt;
&lt;p&gt;私と同じ、20代男性の死因1位は自殺だそうだが(注2)、それと同じくらい「哲学的自殺」も多い。残念ながら、実際に私の身のまわりでも「自殺」と「哲学的自殺」はそう珍しいことではない。&lt;/p&gt;
&lt;p&gt;確かに、それほど生きやすい時代・世代ではないが、なんとか自ら命を断つことなく強く生きて行きたいものだ。&lt;/p&gt;
&lt;p&gt;注1...アルベール・カミュ『異邦人』の主人公&lt;br /&gt;
注2...&lt;a href="http://www.lifelink.or.jp/hp/statistics.html" title="自殺者統計"&gt;自殺者統計&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>輝度の計算</title><link href="http://yuseinishiyama.github.io/posts/2013/07/01/calculate-luminance/" rel="alternate"></link><updated>2013-07-01T00:50:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-07-01:posts/2013/07/01/calculate-luminance/</id><summary type="html">&lt;p&gt;シェーダーでは、よくこんなコードを見かける。&lt;/p&gt;
&lt;p&gt;``` {.lang:c .decode:true title="Luminance"}
const mediump vec3 Perception = vec3(0.299, 0.587, 0.114);&lt;/p&gt;
&lt;p&gt;void main(void)
{
    mediump vec3 color = texture2D(Sampler, TextureCoord).xyz;
    mediump float luminance = dot(Perception, color);
    gl_FragColor = (luminance &amp;gt; Threshold) ? vec4(color, 1) : vec4(0);
}
```&lt;/p&gt;
&lt;p&gt;輝度がThresholdを上回れば、テクスチャの色を使い、そうでなければ黒にするということは分かる。それにしても、luminanceを取得するときにテクスチャの色と内積をとっているPerceptionとはなんだろうか。謎めいた値がハードコードされている。&lt;/p&gt;
&lt;p&gt;どうも人間の光受容体の特性を考慮するための値らしい。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Photoreceptor_cell" title="Photoreceptor cell"&gt;Photoreceptor cell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;人間の目は青にはあまり反応せず、緑には強く反応する。そのままRGBを平均した値を輝度に使ってしまうと、青が明るすぎ、緑が暗すぎる不自然な画像になってしまうというわけだ。&lt;/p&gt;
&lt;p&gt;ちなみにこの係数はNTSC係数と呼ばれ、日本や北米でのテレビ用の規格らしい。&lt;br /&gt;
一般的なsRGB色空間のモニタでは&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vec3(0.2126, 0.7152, 0.0722)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;こちらの係数を利用したほうが良いようだ。&lt;/p&gt;</summary></entry><entry><title>センスについて</title><link href="http://yuseinishiyama.github.io/posts/2013/06/17/about-scenece/" rel="alternate"></link><updated>2013-06-17T02:46:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-06-17:posts/2013/06/17/about-scenece/</id><summary type="html">&lt;p&gt;私はよほど気心の知れた人とでないと、芸術の話をしたくない。&lt;br /&gt;
ましてや、親しくもない人からそういう話を聞かされるのは耐え難い。&lt;/p&gt;
&lt;p&gt;芸術の価値というのは受容者にとって全く異なってくる。ある人にとって価値のあるものが他の人にとっても価値があるとは限らない。だから「自分が良いと思っているものを他人も良いと思うだろう」と考えることは大変浅はかである。すぐに宗教や政治の話をする人が愚かであるのと同じ理由で、すぐに芸術の話をする人間は愚かなわけである。&lt;/p&gt;
&lt;p&gt;私のことを芸術嫌いと考える人もいるかも知れないが、こんな私も大学では美学を専攻し、ほとんど毎日ピアノを演奏するような生活を送った。だが、こうした「批判」と「実践」の毎日は、結果として自己矛盾を産むばかりであった。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;どうして、作者不在の中で作品の価値について述べることができるのだ。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ある作品が、ある作品より重要だと言うことができるのだろうか。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;一度も演者、作り手になったことない大学教授が、「彼らが最も価値を認めていない作品」に対してさえ語る権利があるのだろうか。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;こんなことを考えるうちに、「芸術の価値」に関して自ら語ることはほとんど辞めてしまった。できないと考えたのだ。根拠のあるものが全てだと考えて、職業にはプログラマを選んだ。芸術についてとやかく口をはさみたがる人から見ると、私は「芸術への関心が薄い人」という風に見えるかもしれない。&lt;/p&gt;
&lt;p&gt;確かに、自分にとって価値のあるものが、他人にとっても価値あるものである「可能性は高い」。その可能性を考慮した上で行われる、芸術について語る活動というのは意味があるだろう。しかし、「物事そのものを宣伝する行為」というのは中々に難しい。どうしても「その物事を知っている自分を宣伝する行為」になってしまいがちだ。だから、何かを宣伝するときは常に後者になっていないかどうかを自問自答する必要がある。もちろん後者が全くない状態というのは難しいし、後者の要素が多少あっても前者の重要性が高ければ、有益な行為であるといえよう。&lt;/p&gt;
&lt;p&gt;私が今回問題にしたいと思っているのは、「良いものを知っている人としての\&amp;lt;自分自身&gt;を堂々と喧伝する行為」である。これには反吐が出る。自らを「センスがいい」と称し、「センスがいいものを教えてやる」という上から目線で物事を語る。自己愛と、自分が知っているものへの愛が混同され、結局は単なる自己顕示欲の発露となる。自分に審美眼があると考えることは、なんと傲慢なことだろうか。それは、自分の審美眼を過大評価するだけでなく、それ以外の人の審美眼を貶める大変に失礼な行為である。先程述べたとおり、審美というのは個人のバックグラウンドと密接に結びついており、他人が口出しできるようなものではない。自分の審美のプロセスを他人の審美のプロセスより上に置くのは本来タブーであるはずだ。&lt;/p&gt;
&lt;p&gt;だから、私は「監督」とか「ディレクター」といった肩書きの人はあまり信用していない。彼らは、まとまったものを作るために必要な「審美の調停者」であるべきだ。絶対的な基準を持たない審美は、そこで争いが起こると延々に収束しないし、するべきでもない。だから「暫定的な」基準を設けて調停する必要があり、その基準を決定するのが彼らなのだ。また、客観性を求めすぎると誰にでも受容できる凡庸なものが出来上がる可能性が高いので、個人の主観をとりいれることで良い意味での「偏り」と「尖り」のあるものを作るのも彼らの仕事だ。もちろん、「調停者としての才覚」と「価値ある主観」を持っているとされる「監督」や「ディレクター」はものづくりにおいて重要な立場にある。もし民主的な方法でその立場に選ばれた人であれば尚更誇りに思って良いだろう。だが、私が彼らを信用できないのは、彼らが「価値ある主観」でなく「優れた客観」を持っていると勘違いしていることが多いからだ。「私には才能があるので現場の人間はそれを具現化するための道具にすぎない」と考えている人が多すぎる。「私は現場出身の人間で、現場のことをよく理解している」と思っている人間でさえ、そうだ。「現場にいないのに、現場を知っていると考えていること」がそもそも思い上がりだ。彼らは、「自分の価値観を具現化するために、周囲に協力してもらう」立場にあるべきだ。だから、「価値ある主観」だけでなく「協力してもらえる人となり」も大事なのである。間違っても&lt;/p&gt;
&lt;p&gt;「自分の客観が他人の客観より優れている」&lt;/p&gt;
&lt;p&gt;と考えてはいけない。こんな人間にはだれも協力しない。&lt;/p&gt;
&lt;p&gt;近頃は本当に「センス」という言葉が氾濫している。&lt;/p&gt;
&lt;p&gt;「センス」の良い服&lt;br /&gt;
「センス」のいい音楽&lt;br /&gt;
「センス」のいい身のこなし...&lt;/p&gt;
&lt;p&gt;また、「センス」を磨く活動は、日本国民のメジャーな余暇の過ごし方になっている。どれだけの人が休日にお洒落なカフェや、美術館・博物館・コンサートの類に赴くだろうか。&lt;/p&gt;
&lt;p&gt;そして「センス」を売りにして活動している人も増えた。もちろん、これはある程度仕方のないことだと思う。価値の寿命がどんどん短くなっていく現代において「一つのことだけで食べていける」そういう幸せな人は相当に減った。何をやってもすぐ消えていくので、あれこれ色んなことをやって食べていかねばならない。だから色んなことに首を突っ込んで生きていくしか無いのだ。&lt;/p&gt;
&lt;p&gt;漫才だけでは食べていけないから、コントもする。&lt;br /&gt;
CDを売るだけでは生きていけないから、インスタレーションとコラボする。&lt;br /&gt;
絵を描くだけでは子供を学校にやれないので、本も書く。&lt;/p&gt;
&lt;p&gt;こういう風にオールラウンダーになっていく必要がある。そして、新しい分野に手を出す時に足がかりになるのが「センス」だ。&lt;/p&gt;
&lt;p&gt;だが、商売する側からみると、「センス」などどうでもいい。企業が既に大量のユーザーがついているサービスを買収するのと同じように、既にファンがいる有名人というのはカネになるのだ。  &lt;/p&gt;
&lt;p&gt;悲しいかな、「センス」がいいと勘違いさせられた無数の有名人と、そうした人たちの「センス」を勘違いしてしまった無数の消費者がいるのが現実ではないかと思う。&lt;/p&gt;
&lt;p&gt;もちろんある分野で名を挙げた人というのは、そこで培った方法論や哲学を他に活かすことができる。これは間違いないことだ。だけれど、こういう人を見て「センス」という何かを持った「全能」の人間がいる、と勘違いしてしまった人は多いのではなかろうか。&lt;/p&gt;
&lt;p&gt;「センス」とは便利な言葉だ。反証可能性が全くない。一旦「自分はセンスがいい」と思ったが最後、自分を攻撃してくる人は全て「センスが無い人間」だ。幼稚な全能感に支配された誰からの意見にも耳をかさない、永遠の害悪がそこに生まれる。&lt;/p&gt;
&lt;p&gt;本来「センス」とは、もしそういう言葉があったとすればだが、決して無形のものではないはずだ。それは、価値あるものを生むための「プロセス」なり「考え方」であったりするべきで、&lt;br /&gt;
再生産可能であり、だからこそ他の分野にもある程度適応できるのである。&lt;/p&gt;
&lt;p&gt;自分の能力を問われて、「センス」とか「経験」をすぐに持ち出す人間は大したことのない人間だ。もし彼が何かを成し遂げていたとしたらそれは運だし、何も成し遂げていなければそれは然るべき状態だ。反証不可能な言葉に逃げるという事、それは「何も語るべきことがない人間」であるということの証明にほかならない。仮に運良く成功を収めていたとしよう、それでも後世に伝える言葉を持たなければ、それだけでその価値は半減する。もし、信念を持っている人間であれば、それを語れるはずだし、それを伝えていくべきなのだ。&lt;/p&gt;
&lt;p&gt;もし、「自分はセンスがある」というようなことを考えている人がいれば、危険だと思ったほうがいい。きっと他人に失礼な言動・行動をして迷惑をかけているに違いない。そういう人の言う「センス」は誤った選民思想に他ならない。&lt;/p&gt;</summary></entry><entry><title>iPhoneでの同時動画再生数の上限について</title><link href="http://yuseinishiyama.github.io/posts/2013/06/13/simultaneous-video-playing-in-ios/" rel="alternate"></link><updated>2013-06-13T00:15:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-06-13:posts/2013/06/13/simultaneous-video-playing-in-ios/</id><summary type="html">&lt;p&gt;現在動画編集アプリを作っている。&lt;br /&gt;
動画にエフェクトとかBGMとかなんやらの設定をしていくわけだが、  &lt;/p&gt;
&lt;p&gt;画面上部にプレビュー画面を持ち、その下に編集用のOutletがいくつか存在するような見た目のViewControllerがNavigationControllerでいくつか続いていくというような作りだ。&lt;/p&gt;
&lt;p&gt;ここで奇妙な問題が発生した。&lt;br /&gt;
MPMoviePlayerControllerを使用して、動画を再生しようとしたところ&lt;/p&gt;
&lt;p&gt;``` {.lang:objc .decode:true}
Error Domain=AVFoundationErrorDomain Code=-11839 "Cannot Decode"&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;こんなエラーがでた。デコードできない？動画の形式が悪いのだろうか？&lt;/span&gt;  

&lt;span class="err"&gt;だが、試しにその&lt;/span&gt;&lt;span class="n"&gt;ViewController&lt;/span&gt;&lt;span class="err"&gt;だけにして実行してみたところ問題なく再生できた。&lt;/span&gt;  
&lt;span class="err"&gt;ということは、特定のコンテキストにおいてのみデコードが失敗するわけだ。&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;先日の記事&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt;&lt;span class="err"&gt;にもある通り、いざ実装を始めると全く予期しないところで躓くことが多々ある。&lt;/span&gt;  

&lt;span class="err"&gt;特にこういうロジックの問題でない箇所は原因の特定が難しく、心が折れそうになる。&lt;/span&gt;

&lt;span class="err"&gt;とにかくググるしかないので、上記のログをそのまま検索バーに貼り付けた。&lt;/span&gt;  
&lt;span class="err"&gt;すると同じ様な現象で困っている人を発見することが出来た。&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//stackoverflow.com/questions/8608570/avplayeritem-fails-with-avstatusfailed-and-error-code-cannot-decode][]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;There&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;concurrent&lt;/span&gt; &lt;span class="n"&gt;video&lt;/span&gt; &lt;span class="n"&gt;players&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;AVFoundation&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;due&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;limitations&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;iOS&lt;/span&gt; &lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;devices&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;th&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cannot decode&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;instances&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;AVPlayer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;AVPlayerItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Rather&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;association&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;AVPlayerItem&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;AVPlayer&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;creates&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;render&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;, and you are limited to 4 of these. For example, this causes&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="err"&gt;どうやら、「&lt;/span&gt;&lt;span class="n"&gt;AVFoundation&lt;/span&gt;&lt;span class="err"&gt;で同時に実行できるプレイヤーの数はハードウェアによって制限がある」らしい。&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;eventually&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;AVPlayers&lt;/span&gt; &lt;span class="n"&gt;were&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;being&lt;/span&gt; &lt;span class="n"&gt;released&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;had&lt;/span&gt; &lt;span class="n"&gt;thought&lt;/span&gt; &lt;span class="n"&gt;they&lt;/span&gt; &lt;span class="n"&gt;were&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;pushing&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;AVPlayer&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt; &lt;span class="n"&gt;onto&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Navigation&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Even&lt;/span&gt; &lt;span class="n"&gt;though&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;creating&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;AVPlayer&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;Controllers&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;popped&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;nav&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="n"&gt;they&lt;/span&gt; &lt;span class="n"&gt;were&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;being&lt;/span&gt; &lt;span class="n"&gt;released&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;immediately&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt; &lt;span class="n"&gt;very&lt;/span&gt; &lt;span class="n"&gt;easy&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;reach&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;AVPlayer&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;instances&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;Controllers&lt;/span&gt; &lt;span class="n"&gt;were&lt;/span&gt; &lt;span class="n"&gt;cleaned&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="err"&gt;確かに、自分の場合は&lt;/span&gt;&lt;span class="n"&gt;MPMoviePlayerController&lt;/span&gt;&lt;span class="err"&gt;でエラーが出たが、それ以前に複数の&lt;/span&gt;&lt;span class="n"&gt;AVPlayer&lt;/span&gt;&lt;span class="err"&gt;を使用していて、それらは&lt;/span&gt;&lt;span class="n"&gt;NavigationController&lt;/span&gt;&lt;span class="err"&gt;に残ったままだ。&lt;/span&gt;&lt;span class="n"&gt;AVPlayer&lt;/span&gt;&lt;span class="err"&gt;のインスタンスを開放しろとのことだが、試しに以下のコードを画面遷移時に実行してみた。&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;objc&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_player&lt;/span&gt; &lt;span class="n"&gt;replaceCurrentItemWithPlayerItem&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;なんと、これだけで治った。&lt;/p&gt;
&lt;p&gt;というわけで、AVPlayerやMPMoviePlayerController(MPMoviePlayerViewControllerも)なんかを複数使うときは、AVPlayerItemのインスタンスが残ったままにならないように注意しよう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;http:&lt;/span&gt;&lt;span class="c1"&gt;//stackoverflow.com/questions/8608570/avplayeritem-fails-with-avstatusfailed-and-error-code-cannot-decodehttp://&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>バカ・アホ賛美はもう結構。</title><link href="http://yuseinishiyama.github.io/posts/2013/06/10/never-be-fool/" rel="alternate"></link><updated>2013-06-10T05:52:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-06-10:posts/2013/06/10/never-be-fool/</id><summary type="html">&lt;p&gt;何かに対して、バカだとかアホだとか言うと、「お前はどうなんだ」という議論に持ち込まれることがある。だからはじめに言っておくが、&lt;/p&gt;
&lt;p&gt;私もバカ・アホの部類である。&lt;/p&gt;
&lt;p&gt;だが、「バカ・アホでもいい」と思うほどはバカ・アホではないし、ましてや、「バカ・アホが世界を制する」みたいな仰天思想の持ち主のようなバカ・アホでもない。&lt;/p&gt;
&lt;p&gt;筒井康隆の『アホの壁』の冒頭にこんな文がある。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;むろんアホの壁を乗り越えて彼方へ行かぬ限りは成り立たない仕事もある。言うまでもなく芸術という仕事である。芸術的狂気というものは一旦良識から離れてアホの側に身を置かねばならない。それが単なるアホと異なるのは、壁の存在、壁の所在、壁の位置、壁の高さ、壁を乗り越える方法などを熟知していることだ。そのためには冷静な正気を保ちながら壁を認識しなければならない。これができていない芸術は、常識に囚われたつまらないものにならざるを得ないだろう。&lt;br /&gt;
 \&amp;lt;筒井康隆(2010)『アホの壁』新潮社 p7&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;あれほど無茶苦茶なスラップスティックを書ける作家の芸術感がこのようなものであるということは、とても印象的だ（『アホの壁』は、この常識さゆえに、筒井康隆特有の痛快さにはかけるので物足りないのだが）。&lt;/p&gt;
&lt;p&gt;私は、個性というのはとても大事だと思っている。過去の財産にアクセスしやすい時代に過去の再生産を行なっても大した価値にはならないからだ。それに、今までに無かったものの見方・考え方や歴史観を生むような個性が、現代日本を覆う民族的な不安を乗り越えるためには必要不可欠だとも思う。&lt;/p&gt;
&lt;p&gt;だが、絶対に「個性」と「変」を混同してはいけない。「個性」は意識的で、説明可能で、再生産可能であるがゆえに価値がある。「変」はそうではない。無意識的で、説明できないものであるから、面白いということはあっても共感を呼んだりすることはない。筒井康隆の言うところの「単なるアホ」にすぎない。複雑で高度な理論から発するものと、無意味でナンセンスなものは様相が似てくる。そういうわけで、アウトプットが同じならば、インプットを探らないとその違いが判断できない。だから、こそ説明できるということはとても重要だ。噛み砕いて言えば、「笑わせる」のはいいけども「笑われる」のは良くないということだ。&lt;/p&gt;
&lt;p&gt;以前にも取り上げたが、Jobsの&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Stay hungry. Stay foolish.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;は、本当に冷静になって受け止めるべき言葉だ。そもそもJobs自身が引用した文であるということ。語呂の良い扇動的な文章であること。我々日本人には完全なニュアンスは理解できないこと。Jobsの人間性は賛否両論であること。これらのことを考えた上で受け止めなければならない。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/fujipon/20111016"&gt;琥珀色の戯言&lt;/a&gt;&lt;br /&gt;
この記事にあるぐらいの、一歩引いた考えが必要だろう。&lt;/p&gt;
&lt;p&gt;こういう閉塞感のある時代に、「バカ･アホでも大丈夫だよ」と言われると救われた気持ちになるが、そういうところだけを取り入れたらどれだけ酷いことになるかは明らかである。先にも述べたように、これからは共感されるような思想が必要になってくる。そういう時に、「バカでいろ」といわれて「バカでいます」というような人間は役に立たない。日本でJobsの人気が高く、また、マスメディアにも取り上げやすい人物なだけに悪影響が無いか大変心配である。&lt;/p&gt;
&lt;p&gt;「バカ」「アホ」とタイプしすぎたせいで、随分と下品な見た目になってしまったが、最後にもう一度だけ&lt;/p&gt;
&lt;p&gt;Don't stay AHO!&lt;/p&gt;</summary></entry><entry><title>プログラマにとって〈できる〉とは何か。</title><link href="http://yuseinishiyama.github.io/posts/2013/06/07/what-does-saying-i-can-means/" rel="alternate"></link><updated>2013-06-07T00:54:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-06-07:posts/2013/06/07/what-does-saying-i-can-means/</id><summary type="html">&lt;p&gt;プログラマとして働いていると、特に非プログラマの人から&lt;/p&gt;
&lt;p&gt;「hogehogeをfugafugaするようなことって（プログラムで）できるんですか？」&lt;/p&gt;
&lt;p&gt;という類の質問をされることが良くある。当然そういうことを聞かれたら&lt;/p&gt;
&lt;p&gt;「できると思いますよ。」&lt;/p&gt;
&lt;p&gt;と答えるしかない。まともな思考な人が考えるような要求、つまり「iPhoneの画面をダブルタップすると、口やかましい上司を遠隔地へと転送できる」とか「母親をカメラで撮影すると、実家への仕送りを強要しなくなる」とか、そういうのではない要求、というものはたいていの場合、理論上実現可能だからだ。&lt;/p&gt;
&lt;p&gt;コンピュータサイエンスに明るいわけではないが、「&lt;a href="http://ja.wikipedia.org/wiki/%E3%83%81%E3%83%A5%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%B0%E5%AE%8C%E5%85%A8" title="チューリング完全"&gt;チューリング完全&lt;/a&gt;」という言葉ぐらいなら知っている。コンピュータの世界における「やればできる」に相当する概念といったところか。  &lt;/p&gt;
&lt;p&gt;つまり、「できますか」という問に「やればできる」と答えていて、さらに、「やればできる」のことを「できる」という言葉で表してしまっているわけだ。&lt;/p&gt;
&lt;p&gt;物質世界にくらべて、「やればできる」のが当たり前のソフトウェアの世界だからこそ、その当たり前の答えを使ってしまうと厄介なことが起きる。まず、&lt;/p&gt;
&lt;p&gt;「Aさんがhogehogeをfugafugaできるらしいから、やってもらおう。」&lt;/p&gt;
&lt;p&gt;という風に自分が頼まれてしまう。そして、自分自身も判断力が鈍っていると&lt;/p&gt;
&lt;p&gt;「まぁ、やればできるはずだからやってみるか。」&lt;/p&gt;
&lt;p&gt;と安易に引き受けてしまうわけである。プログラムの世界以外なら「やればできる」と「できる」の間にある大きな溝を認識できるのにも関わらず、だ。&lt;br /&gt;
こうして、バカな私はその溝に落ちることになる。&lt;/p&gt;
&lt;p&gt;パフォーマンスが・・・&lt;br /&gt;
このAPIを使用するとメモリリークが・・・&lt;br /&gt;
ドキュメントにはそう書いてあるんですけど・・・  &lt;/p&gt;
&lt;p&gt;オープンソースのライブラリを使おうと思ったんですけど、ライセンスが・・・&lt;/p&gt;
&lt;p&gt;様々な問題との果てしない戦いが始まり、終いにはコレを言われるわけだ。&lt;/p&gt;
&lt;p&gt;「できるって言ったよね？」&lt;/p&gt;
&lt;p&gt;悲しいかな、当初は物腰が柔らかかった人でさえ、冷ややかなタメ口になっていたりする。&lt;/p&gt;
&lt;p&gt;とはいえ、「できない」はどうも使いたくない。「やればできる」わけだからそれはそれで論理的ではない。それに、「できない」と言うと仕事が無くなるわけで、そうなるぐらいだったら茨の道を歩んだほうがマシだ。そもそも「できないということを証明する」ことは「できるということを証明する」ことよりはるかに困難で、だからこそ「できない」という答えが正解になることは少なく、非論理的だと考えている。だから、簡単に「できない」などという開発者は現実主義者でもなんでもなく、ただただ信用出来ない。&lt;/p&gt;
&lt;p&gt;結論としては、これからも「できる」と言っていこうと思う。&lt;br /&gt;
ただし、自分の中で「できる」という結論を出すのは、「できた」後だ。&lt;br /&gt;
プログラマにとっての「できる」は「したことがある」であるべきだ。  &lt;/p&gt;
&lt;p&gt;だからこそ、手を動かすべきだし、なにか作ってみるべきだ。実践から学ぶことは非常に多い。  &lt;/p&gt;
&lt;p&gt;（実践から全てを学べるという意味ではない。そういう考えの人は得てして、「動けばオーケープログラマ」だったり「フラグ大好きコールバックもループとフラグで実現するよプログラマ」だったりする。）&lt;/p&gt;
&lt;p&gt;本当は「できることはできるのですが、僕のスキルでは途中で挫折するか、もしくは時間がかかりすぎるかもしれません、調査期間をNヶ月いただければ・・・」とかなんとか言いたいところだが、そんなやつには誰も何も任せてくれない。自分の成長のために大風呂敷を広げ、一方で自分が「できる」状態ではないことを認識し内心は謙虚でなければいけない。&lt;br /&gt;
そうすれば他所様が開発したものを見て&lt;/p&gt;
&lt;p&gt;「これくらいなら俺も\&amp;lt;できる&gt;けどなぁ」&lt;/p&gt;
&lt;p&gt;というようなことを言わなくなるだろう。&lt;br /&gt;
ここでも、「やればできる==できる」の間違えが犯されている。&lt;/p&gt;</summary></entry><entry><title>Objective-Cで文字列定数</title><link href="http://yuseinishiyama.github.io/posts/2013/06/02/constant-string-in-objectivec/" rel="alternate"></link><updated>2013-06-02T21:54:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-06-02:posts/2013/06/02/constant-string-in-objectivec/</id><summary type="html">&lt;p&gt;Objective-Cで文字列定数の宣言をする方法について考えてみた。&lt;br /&gt;
最も手っ取り早いのは当然マクロだろう。&lt;/p&gt;
&lt;p&gt;``` {.lang:objc .decode:true title="SomeClass.m"}&lt;/p&gt;
&lt;h1&gt;define CONST_STR @"Const Str"&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;だが、当然二重定義の問題があるので好ましいとは言えない。&lt;/span&gt;  
&lt;span class="err"&gt;より好ましいのは以下の方法だろう。&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;objc&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SomeClass.m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;kConstStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Const Str&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;constの位置に注意。&lt;br /&gt;
文字列に対するポインタにconstを指定している。  &lt;/p&gt;
&lt;p&gt;（ちなみにObective-Cではメンバ変数のプレフィックは「_」が完全に推奨されている一方で、定数にこうしたハンガリアン記法を使うかどうか迷いどころだが、たいがいのフレームワークでは定数はこの形で書かれているし、実際しっくりくる。）&lt;/p&gt;
&lt;p&gt;さてこの定数を外部に公開したいとする。&lt;br /&gt;
ここでこんな風にやってしまうと間違いだ。&lt;/p&gt;
&lt;p&gt;``` {.lang:objc .decode:true title="SomeClass.h"}
static NSString * const kConstStr = @"Const Str";&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//stackoverflow.com/a/7642561][]  &lt;/span&gt;
&lt;span class="err"&gt;ここに&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="err"&gt;に関する分かりやすい説明がある。&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Objective&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;means&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;different&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;members&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Objective&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="n"&gt;means&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;internal&lt;/span&gt; &lt;span class="n"&gt;linkage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Internal&lt;/span&gt; &lt;span class="n"&gt;linkage&lt;/span&gt; &lt;span class="n"&gt;means&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;translation&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;being&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;compiled&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;recursively&lt;/span&gt; &lt;span class="n"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;That&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="n"&gt;cannot&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;referenced&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;different&lt;/span&gt; &lt;span class="n"&gt;translation&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;internal&lt;/span&gt; &lt;span class="n"&gt;linkage&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;translation&lt;/span&gt; &lt;span class="n"&gt;units&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;same&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;So&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;declaring&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;includes&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="n"&gt;gets&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;separate&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="err"&gt;—&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;references&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;within&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;refer&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;same&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;references&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;different&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;refer&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;different&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;single&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;One&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt; &lt;span class="n"&gt;linkage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;declare&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="n"&gt;keyword&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="n"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Internal&lt;/span&gt; &lt;span class="n"&gt;linkage&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt; &lt;span class="n"&gt;linkage&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mutually&lt;/span&gt; &lt;span class="n"&gt;exclusive&lt;/span&gt;&lt;span class="err"&gt;—&lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;cannot&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;declared&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;both&lt;/span&gt; &lt;span class="k"&gt;extern&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;alternative&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Panos&lt;/span&gt; &lt;span class="n"&gt;suggested&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;instead&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;keeps&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;functionality&lt;/span&gt; &lt;span class="n"&gt;within&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;makes&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;sense&lt;/span&gt; &lt;span class="n"&gt;semantically&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;@private&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;desire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;marginal&lt;/span&gt; &lt;span class="n"&gt;performance&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;penalty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;highly&lt;/span&gt; &lt;span class="n"&gt;unlikely&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;bottleneck&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;suspect&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;つまり&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="err"&gt;や&lt;/span&gt;&lt;span class="n"&gt;Objective&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="err"&gt;の&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="err"&gt;は内部結合であり、ヘッダ上の&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="err"&gt;変数を異なるソースファイルから読み取ると、それぞれのファイル内で独立した変数として認識されてしまうというわけだ。&lt;/span&gt;  
&lt;span class="err"&gt;試しに以下のような実験をしてみた。&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;objc&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ClassA.h&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;ClassA&lt;/span&gt; : &lt;span class="nc"&gt;NSObject&lt;/span&gt;

&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;staticVar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;setStaticVar:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;staticVarOfClassD&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;setStaticVarOfClassD:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;externVar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;setExternVar:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;externVarOfClassD&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;setExternVarOfClassD:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;NSInteger&lt;/span&gt; &lt;span class="n"&gt;staticVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="n"&gt;NSInteger&lt;/span&gt; &lt;span class="n"&gt;externVar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;``` {.lang:objc .decode:true title="ClassA.m"}&lt;/p&gt;
&lt;h1&gt;import "ClassA.h"&lt;/h1&gt;
&lt;p&gt;@interface ClassD : NSObject&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(NSInteger)staticVar;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(void)setStaticVar:(NSInteger)value;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;@end&lt;/p&gt;
&lt;p&gt;@implementation ClassD&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p _="
" return="return" staticVar_="staticVar;
"&gt;(NSInteger)staticVar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="=" staticVar="staticVar" value_="value;
"&gt;(void)setStaticVar:(NSInteger)value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="
" externVar_="externVar;
" return="return"&gt;(NSInteger)externVar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="=" externVar="externVar" value_="value;
"&gt;(void)setExternVar:(NSInteger)value&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;@end&lt;/p&gt;
&lt;p&gt;NSInteger externVar = 0;&lt;/p&gt;
&lt;p&gt;@implementation ClassA&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p _="
" _ClassD="[ClassD" return="return" staticVar_="staticVar];
"&gt;(NSInteger)staticVarOfClassD&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="
" _ClassD="[ClassD" setStaticVar:value_="setStaticVar:value];
"&gt;(void)setStaticVarOfClassD:(NSInteger)value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="
" _ClassD="[ClassD" externVar_="externVar];
" return="return"&gt;(NSInteger)externVarOfClassD&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="
" _ClassD="[ClassD" setExternVar:value_="setExternVar:value];
"&gt;(void)setExternVarOfClassD:(NSInteger)value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="
" return="return" staticVar_="staticVar;
"&gt;(NSInteger)staticVar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="=" staticVar="staticVar" value_="value;
"&gt;(void)setStaticVar:(NSInteger)value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="
" externVar_="externVar;
" return="return"&gt;(NSInteger)externVar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="=" externVar="externVar" value_="value;
"&gt;(void)setExternVar:(NSInteger)value&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;@end&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;objc&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ClassB.h&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;ClassB&lt;/span&gt; : &lt;span class="nc"&gt;NSObject&lt;/span&gt;

&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;staticVar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;setStaticVar:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;externVar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;setExternVar:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;``` {.lang:objc .decode:true title="ClassB.m"}&lt;/p&gt;
&lt;h1&gt;import "ClassB.h"&lt;/h1&gt;
&lt;h1&gt;import "ClassA.h"&lt;/h1&gt;
&lt;p&gt;@interface ClassB ()&lt;/p&gt;
&lt;p&gt;@end&lt;/p&gt;
&lt;p&gt;@implementation ClassB&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p _="
" return="return" staticVar_="staticVar;
"&gt;(NSInteger)staticVar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="=" staticVar="staticVar" value_="value;
"&gt;(void)setStaticVar:(NSInteger)value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="
" externVar_="externVar;
" return="return"&gt;(NSInteger)externVar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="=" externVar="externVar" value_="value;
"&gt;(void)setExternVar:(NSInteger)value&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;@end&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;objc&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ClassC.h&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;ClassC&lt;/span&gt; : &lt;span class="nc"&gt;NSObject&lt;/span&gt;

&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;staticVar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;setStaticVar:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;externVar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;setExternVar:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;``` {.lang:objc .decode:true title="ClassC.m"}&lt;/p&gt;
&lt;h1&gt;import "ClassC.h"&lt;/h1&gt;
&lt;h1&gt;import "ClassA.h"&lt;/h1&gt;
&lt;p&gt;@implementation ClassC&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p _="
" return="return" staticVar_="staticVar;
"&gt;(NSInteger)staticVar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="=" staticVar="staticVar" value_="value;
"&gt;(void)setStaticVar:(NSInteger)value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="
" externVar_="externVar;
" return="return"&gt;(NSInteger)externVar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="=" externVar="externVar" value_="value;
"&gt;(void)setExternVar:(NSInteger)value&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;@end&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt; &lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;objc&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main.m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#import &amp;quot;ClassA.h&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#import &amp;quot;ClassB.h&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#import &amp;quot;ClassC.h&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;kConst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;const&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;autoreleasepool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ClassA&lt;/span&gt; &lt;span class="n"&gt;setStaticVar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ClassA&lt;/span&gt; &lt;span class="n"&gt;setExternVar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;staticVar of classA is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassA&lt;/span&gt; &lt;span class="n"&gt;staticVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;staticVar of classB is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassB&lt;/span&gt; &lt;span class="n"&gt;staticVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;staticVar of classC is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassC&lt;/span&gt; &lt;span class="n"&gt;staticVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;staticVar of classD is %ld &lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassA&lt;/span&gt; &lt;span class="n"&gt;staticVarOfClassD&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;extern of classA is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassA&lt;/span&gt; &lt;span class="n"&gt;externVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;extern of classB is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassB&lt;/span&gt; &lt;span class="n"&gt;externVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;extern of classC is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassC&lt;/span&gt; &lt;span class="n"&gt;externVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;extern of classD is %ld &lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassA&lt;/span&gt; &lt;span class="n"&gt;externVarOfClassD&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ClassB&lt;/span&gt; &lt;span class="n"&gt;setStaticVar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ClassB&lt;/span&gt; &lt;span class="n"&gt;setExternVar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;staticVar of classA is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassA&lt;/span&gt; &lt;span class="n"&gt;staticVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;staticVar of classB is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassB&lt;/span&gt; &lt;span class="n"&gt;staticVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;staticVar of classC is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassC&lt;/span&gt; &lt;span class="n"&gt;staticVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;staticVar of classD is %ld &lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassA&lt;/span&gt; &lt;span class="n"&gt;staticVarOfClassD&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;extern of classA is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassA&lt;/span&gt; &lt;span class="n"&gt;externVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;extern of classB is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassB&lt;/span&gt; &lt;span class="n"&gt;externVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;extern of classC is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassC&lt;/span&gt; &lt;span class="n"&gt;externVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;extern of classD is %ld &lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassA&lt;/span&gt; &lt;span class="n"&gt;externVarOfClassD&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ClassC&lt;/span&gt; &lt;span class="n"&gt;setStaticVar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ClassC&lt;/span&gt; &lt;span class="n"&gt;setExternVar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;staticVar of classA is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassA&lt;/span&gt; &lt;span class="n"&gt;staticVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;staticVar of classB is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassB&lt;/span&gt; &lt;span class="n"&gt;staticVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;staticVar of classC is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassC&lt;/span&gt; &lt;span class="n"&gt;staticVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;staticVar of classD is %ld &lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassA&lt;/span&gt; &lt;span class="n"&gt;staticVarOfClassD&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;extern of classA is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassA&lt;/span&gt; &lt;span class="n"&gt;externVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;extern of classB is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassB&lt;/span&gt; &lt;span class="n"&gt;externVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;extern of classC is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassC&lt;/span&gt; &lt;span class="n"&gt;externVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;extern of classD is %ld &lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassA&lt;/span&gt; &lt;span class="n"&gt;externVarOfClassD&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ClassA&lt;/span&gt; &lt;span class="n"&gt;setStaticVarOfClassD&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ClassA&lt;/span&gt; &lt;span class="n"&gt;setExternVarOfClassD&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;staticVar of classA is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassA&lt;/span&gt; &lt;span class="n"&gt;staticVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;staticVar of classB is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassB&lt;/span&gt; &lt;span class="n"&gt;staticVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;staticVar of classC is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassC&lt;/span&gt; &lt;span class="n"&gt;staticVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;staticVar of classD is %ld &lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassA&lt;/span&gt; &lt;span class="n"&gt;staticVarOfClassD&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;extern of classA is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassA&lt;/span&gt; &lt;span class="n"&gt;externVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;extern of classB is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassB&lt;/span&gt; &lt;span class="n"&gt;externVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;extern of classC is %ld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassC&lt;/span&gt; &lt;span class="n"&gt;externVar&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;extern of classD is %ld &lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;ClassA&lt;/span&gt; &lt;span class="n"&gt;externVarOfClassD&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;出力結果がこれ。&lt;/p&gt;
&lt;p&gt;``` {.lang:objc .highlight:0 .decode:true}
2013-06-02 21:21:04.953 StaticExternTest[1020:303] staticVar of classA is 0
2013-06-02 21:21:04.955 StaticExternTest[1020:303] staticVar of classB is 0
2013-06-02 21:21:04.955 StaticExternTest[1020:303] staticVar of classC is 0
2013-06-02 21:21:04.956 StaticExternTest[1020:303] staticVar of classD is 0 &lt;/p&gt;
&lt;p&gt;2013-06-02 21:21:04.956 StaticExternTest[1020:303] extern of classA is 0
2013-06-02 21:21:04.957 StaticExternTest[1020:303] extern of classB is 0
2013-06-02 21:21:04.957 StaticExternTest[1020:303] extern of classC is 0
2013-06-02 21:21:04.957 StaticExternTest[1020:303] extern of classD is 0 &lt;/p&gt;
&lt;p&gt;2013-06-02 21:21:04.958 StaticExternTest[1020:303] staticVar of classA is 0
2013-06-02 21:21:04.958 StaticExternTest[1020:303] staticVar of classB is 1
2013-06-02 21:21:04.959 StaticExternTest[1020:303] staticVar of classC is 0
2013-06-02 21:21:04.959 StaticExternTest[1020:303] staticVar of classD is 0 &lt;/p&gt;
&lt;p&gt;2013-06-02 21:21:04.959 StaticExternTest[1020:303] extern of classA is 1
2013-06-02 21:21:04.960 StaticExternTest[1020:303] extern of classB is 1
2013-06-02 21:21:04.960 StaticExternTest[1020:303] extern of classC is 1
2013-06-02 21:21:04.960 StaticExternTest[1020:303] extern of classD is 1 &lt;/p&gt;
&lt;p&gt;2013-06-02 21:21:04.961 StaticExternTest[1020:303] staticVar of classA is 0
2013-06-02 21:21:04.961 StaticExternTest[1020:303] staticVar of classB is 1
2013-06-02 21:21:04.961 StaticExternTest[1020:303] staticVar of classC is 2
2013-06-02 21:21:04.962 StaticExternTest[1020:303] staticVar of classD is 0 &lt;/p&gt;
&lt;p&gt;2013-06-02 21:21:04.962 StaticExternTest[1020:303] extern of classA is 2
2013-06-02 21:21:04.962 StaticExternTest[1020:303] extern of classB is 2
2013-06-02 21:21:04.963 StaticExternTest[1020:303] extern of classC is 2
2013-06-02 21:21:04.963 StaticExternTest[1020:303] extern of classD is 2 &lt;/p&gt;
&lt;p&gt;2013-06-02 21:21:04.963 StaticExternTest[1020:303] staticVar of classA is 3
2013-06-02 21:21:04.964 StaticExternTest[1020:303] staticVar of classB is 1
2013-06-02 21:21:04.964 StaticExternTest[1020:303] staticVar of classC is 2
2013-06-02 21:21:04.964 StaticExternTest[1020:303] staticVar of classD is 3 &lt;/p&gt;
&lt;p&gt;2013-06-02 21:21:04.965 StaticExternTest[1020:303] extern of classA is 3
2013-06-02 21:21:04.965 StaticExternTest[1020:303] extern of classB is 3
2013-06-02 21:21:04.966 StaticExternTest[1020:303] extern of classC is 3
2013-06-02 21:21:04.966 StaticExternTest[1020:303] extern of classD is 3&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;実際にヘッダファイルから読み込まれた&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="err"&gt;変数は、それぞれ独立して変更されてしまっている。&lt;/span&gt;  

&lt;span class="err"&gt;一方で、&lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="err"&gt;は外部結合であり、期待通りの動作をする。&lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="err"&gt;だと二重定義も防げる&lt;/span&gt;

&lt;span class="err"&gt;外部のファイルからも参照したい定数を宣言する場合は、&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;objc&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SomeClass.h&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;kConstStr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;{.lang:objc .decode:true title="SomeClass.m"}
NSString * const kConstStr = @"Const Str";&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;このようにするのが確実だろう。&lt;/p&gt;
&lt;p&gt;このあたりの細かい挙動は忘れやすい上に、適当にやっても問題が顕在化しないことのほうが多いからこそ、ベストプラクティスを知っておきたいところだ。&lt;/p&gt;</summary></entry><entry><title>Simple is best.</title><link href="http://yuseinishiyama.github.io/posts/2013/05/21/simple-is-best/" rel="alternate"></link><updated>2013-05-21T21:42:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-05-21:posts/2013/05/21/simple-is-best/</id><summary type="html">&lt;p&gt;特別飾らず、&lt;br /&gt;
特別奇抜でもなく、&lt;br /&gt;
それでも見ているだけで、格好いい、と思えるアーティストがいる。&lt;/p&gt;
&lt;p&gt;たとえば、Caetano Velosoや、&lt;br /&gt;
http://www.youtube.com/watch?v=4OOa_Ffv0wg&lt;/p&gt;
&lt;p&gt;Peter Gabrielや&lt;br /&gt;
http://www.youtube.com/watch?v=3_Q79lls1f0&lt;/p&gt;
&lt;p&gt;David Bowieなんかがそうだ。&lt;br /&gt;
http://www.youtube.com/watch?v=YYjBQKIOb-w&lt;/p&gt;
&lt;p&gt;視覚的にも、聴覚的にも無駄が少なく、&lt;br /&gt;
どのようにすれば、「どう見えるか」「どう聴こえるか」分かっている。&lt;br /&gt;
そんなベテランミュージシャンだからこそ、なせる技であろう。&lt;/p&gt;
&lt;p&gt;だが、シンプルにすれば格好良く見えるだろうか。&lt;br /&gt;
当たり前だが、そうではない。&lt;br /&gt;
素人のシンプルさなど、つまらないものでしかないし、&lt;br /&gt;
無数の「俺でもできる」の一言で片付けられてしまう。&lt;/p&gt;
&lt;p&gt;たとえば、音楽などは、いい加減な曲でも、ボーカルを重ねたり、  &lt;/p&gt;
&lt;p&gt;ストリングスを入れたり、コーラスをかけたりすると、なんとなくよく聞こえる。&lt;br /&gt;
自分で音楽を作ってみたことがある人は実感があるだろう。&lt;br /&gt;
こんな風に、簡素な駄作よりは、手の込んだ駄作のほうがまだマシだ。  &lt;/p&gt;
&lt;p&gt;つまり、「探しても見つからない」と「探せばなにかあるかもしれない」の違いである。&lt;/p&gt;
&lt;p&gt;では、「探しものがそこにある」状態を生み出すにはなにをすればよいか。&lt;br /&gt;
ゴミの山に浸かるしかない。  &lt;/p&gt;
&lt;p&gt;そこで色々なムダに出会い、それからはじめて、捨てて良い物に気づくことができるのだ。  &lt;/p&gt;
&lt;p&gt;そして、上に挙げたようなアーティストは、まさにこの取捨選択を行なってきている。&lt;/p&gt;
&lt;p&gt;以下のように、彼らのシンプルに至るまでの遠回りは並大抵ではない。&lt;/p&gt;
&lt;p&gt;Caetano Veloso&lt;br /&gt;
&lt;a href="http://yuseinishiyama.com/wp-content/uploads/2013/05/Caetano-Veloso.jpg"&gt;&lt;img alt="Caetano Veloso" src="http://yuseinishiyama.com/wp-content/uploads/2013/05/Caetano-Veloso.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Peter Gabriel&lt;br /&gt;
[&lt;img alt="PeterGabriel" src="http://yuseinishiyama.com/wp-content/uploads/2013/05/PeterGabriel-300x297.jpg" /&gt;][]&lt;/p&gt;
&lt;p&gt;David Bowie&lt;br /&gt;
[&lt;img alt="davidbowie" src="http://yuseinishiyama.com/wp-content/uploads/2013/05/davidbowie-271x300.jpg" /&gt;][]&lt;/p&gt;
&lt;p&gt;これだけの、装飾過多から晩年の状態を作り出しているのだから、&lt;br /&gt;
当然、相当に必要なものだけが残っているだろう。&lt;br /&gt;
ただ単に残すといっても、常人とは母数が違いすぎるわけである。&lt;/p&gt;
&lt;p&gt;音楽やデザインの世界で、シンプルさの地位が上がってきている。機能美が追求されるようになってきた。&lt;br /&gt;
だからこそ、観客は見る目を、聴く耳を養わなければいけない。&lt;/p&gt;
&lt;p&gt;単純なことしかできないから、シンプルなのか、&lt;br /&gt;
あらゆるムダを取り除いているために、シンプルなのか。&lt;/p&gt;
&lt;p&gt;前者のシンプルさは本当に醜悪だ。  &lt;/p&gt;
&lt;p&gt;「できることと」、「したいことと」、「すべきこと」を混同し、観客を混乱させる。&lt;br /&gt;
ただの、詐欺でしかない。  &lt;/p&gt;
&lt;p&gt;それも、三流を二流に見せかけるならまだしも、低い技術をもってして「最上級」を謳う。&lt;/p&gt;
&lt;p&gt;シンプルがもてはやされる時代だからこそ、シンプルに厳しくなるべきだ。  &lt;/p&gt;
&lt;p&gt;一方で、やがて最高のシンプルを体現するであろう人が生み出す大量のゴミへの温かい眼差しは欠いてはならない。&lt;/p&gt;
&lt;p&gt;[&lt;img alt="PeterGabriel" src="http://yuseinishiyama.com/wp-content/uploads/2013/05/PeterGabriel-300x297.jpg" /&gt;]: http://yuseinishiyama.com/wp-content/uploads/2013/05/PeterGabriel.jpg
  [&lt;img alt="davidbowie" src="http://yuseinishiyama.com/wp-content/uploads/2013/05/davidbowie-271x300.jpg" /&gt;]: http://yuseinishiyama.com/wp-content/uploads/2013/05/davidbowie.jpg&lt;/p&gt;</summary></entry><entry><title>自己検閲の重要さ</title><link href="http://yuseinishiyama.github.io/posts/2013/05/17/self-censorship/" rel="alternate"></link><updated>2013-05-17T00:16:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-05-17:posts/2013/05/17/self-censorship/</id><summary type="html">&lt;p&gt;文章表現に関する、興味深い記事を発見した。&lt;/p&gt;
&lt;p&gt;&lt;a id="685" name="685"&gt;&lt;/a&gt;&lt;a href=""&gt;「自分の書く文章は価値がない」を抜け出すライティング・マラソンという方法←自己検閲を振り切って書きなぐるために&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;書くことは、ほとんど必ず落胆を伴う（仕様だと思っていいくらいだ）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文章を書く上でかならず障壁となるであろう「自己検閲の壁」をいかにして乗り越えるか、という内容である。まさに今ブログを書いている私にとって、こうした&lt;/p&gt;
&lt;p&gt;「書くことによって、書くようになる論」&lt;/p&gt;
&lt;p&gt;というのは、当然実感がある。&lt;/p&gt;
&lt;p&gt;そもそも、あらゆる作業で、行動が動機を先んじることは珍しくない。  &lt;/p&gt;
&lt;p&gt;こうした「作業興奮」をものにできるかどうかで、何かを成し遂げれるかどうかが決まる、といっても過言ではないだろう。  &lt;/p&gt;
&lt;p&gt;ところで、この記事で何よりも興味深いのが〈「作文のつまずき」の現れ方〉という図だ。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://yuseinishiyama.com/wp-content/uploads/2013/05/sakubunno-tsumazuki.png"&gt;&lt;img alt="作文のつまずき" src="http://yuseinishiyama.com/wp-content/uploads/2013/05/sakubunno-tsumazuki.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;（出典：『&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4183513081/readingmonkey-22/ref=nosim/"&gt;国語科授業の常識を疑う〈3〉作文
(市毛勝雄模擬授業の記録と分析)&lt;/a&gt;』p.60）&lt;/p&gt;
&lt;p&gt;この図から導き出される結論の中で、最も妥当であるものは、ここで紹介している記事のような、&lt;/p&gt;
&lt;p&gt;「自分の文章が無価値に感じる、というつまずきを克服することで、平明達意の文章を書こう。」&lt;/p&gt;
&lt;p&gt;というものであろう。だが、同時に私は、この図から別の重大な点を読み取った。それは&lt;/p&gt;
&lt;p&gt;「自分の文章は無価値に感じる、というつまずきは成熟過程のかなり後半にある。」&lt;/p&gt;
&lt;p&gt;ということだ。&lt;/p&gt;
&lt;p&gt;前回の記事とやや内容が重複するが、どうも最近は「表現することは正義」みたいな風潮がある。  &lt;/p&gt;
&lt;p&gt;少なくとも自分は子供の頃から「日本人はシャイだからなんたら」だとか、「そんなんじゃグローバル社会でうんたら」だとか、さらに  &lt;/p&gt;
&lt;p&gt;ひどいのだと、「質問がなくても手を上げろ」とかいう無茶苦茶なことまで言われてきた。&lt;/p&gt;
&lt;p&gt;（これは一種の呪いのようなものだ。会議の場や就職活動の場などでの、本人でさえ不要だと気づいているあろうはずのあの全く意味を成さない発言から、その効果は明らかである。）&lt;/p&gt;
&lt;p&gt;でも、「自分の発言は無価値じゃないか」という自己検閲が機能する前の段階で、「気後れ＝悪」みたいなことを教えるべきだろうか？&lt;/p&gt;
&lt;p&gt;むしろ、&lt;/p&gt;
&lt;p&gt;①自己検閲が働いていることは正しい&lt;/p&gt;
&lt;p&gt;②その段階に達したからこそ、あと少しで平明達意の表現ができる&lt;/p&gt;
&lt;p&gt;③だから表現しましょう&lt;/p&gt;
&lt;p&gt;という風に段階を踏むべきだ。&lt;br /&gt;
自己検閲が働いているということは、喜ぶべきことである。  &lt;/p&gt;
&lt;p&gt;自己検閲が働いているということは、それだけ可能性があるということである。  &lt;/p&gt;
&lt;p&gt;自己検閲が働いているということは、当意即妙の表現のための必要条件なのである。&lt;/p&gt;
&lt;p&gt;そして、私も自分の表現の稚拙さと、それに対する批判を「恐れているからこそ」&lt;br /&gt;
こうして、表現していこうと思っている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;http:&lt;/span&gt;&lt;span class="c1"&gt;//readingmonkey.blog45.fc2.com/blog-entry-685.html&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;「自分の書く文章は価値がない」を抜け出すライティング・マラソンという方法←自己検閲を振り切って書きなぐるために&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>それほどまでに言論は自由であるべきだろうか。</title><link href="http://yuseinishiyama.github.io/posts/2013/04/24/hello-world/" rel="alternate"></link><updated>2013-04-24T08:12:00+02:00</updated><author><name>nishiyama101</name></author><id>tag:yuseinishiyama.github.io,2013-04-24:posts/2013/04/24/hello-world/</id><summary type="html">&lt;p&gt;試しに「ブログ始めました」をGoogleで検索してみたところ、&lt;br /&gt;
約 220,000,000 件の検索結果がヒットした。&lt;/p&gt;
&lt;p&gt;無数のブログには、無数の「ブログを書く理由」があるだろうが、&lt;br /&gt;
私の場合、その理由は「自分自身のプロフィールを作成すること」にある。  &lt;/p&gt;
&lt;p&gt;このブログを見て、私がどんな人か、どんな思想を持っているか知ってほしい。&lt;br /&gt;
言ってしまえば「自己顕示欲」にほかならない。&lt;/p&gt;
&lt;p&gt;ところで、最近の成功哲学では、以下のようなものがもてはやされている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;考えるより行動せよ。&lt;/li&gt;
&lt;li&gt;物事はシンプルに考えろ。&lt;/li&gt;
&lt;li&gt;いらないプライドを捨てろ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私はこれらの考えに異議をとなえたい。  &lt;/p&gt;
&lt;p&gt;考えずに行動して成功したとしても、必ず、その「考えなしの部分」の尻拭いをした人がいる。  &lt;/p&gt;
&lt;p&gt;熟慮せずに行動し、したり顔をしても、どこかでその配慮の無さに傷ついている人がいる。&lt;/p&gt;
&lt;p&gt;自由権が保証されている現代では、批判を受けると事あるごとに&lt;/p&gt;
&lt;p&gt;「言論の自由だ」&lt;/p&gt;
&lt;p&gt;とか&lt;/p&gt;
&lt;p&gt;「表現の自由だ」&lt;/p&gt;
&lt;p&gt;と反論する人がいるが、これらの権利は比較的新しいものであって、  &lt;/p&gt;
&lt;p&gt;それほど当たり前だと考えていいものではないし、これらの権利があるからと言って&lt;br /&gt;
自分の行動がもたらす結果を考慮しないのは、あまりに無責任だ。&lt;/p&gt;
&lt;p&gt;行動力が悪だといいたいわけではない。&lt;br /&gt;
行動力はエンジンであって、必ず必要だ。  &lt;/p&gt;
&lt;p&gt;だが、どうしてエンジンを制御するための「思考」がこれほど軽視されるのか。&lt;/p&gt;
&lt;p&gt;「ものづくり大国」と呼ばれた日本が、いつの間にか技術面でアメリカはもちろん、&lt;br /&gt;
アジア圏の他の国々などにも引けを取り出したのはなぜだろうか。&lt;br /&gt;
私は、ある部分では、行動力ありきの考え方に責任があるように思う。  &lt;/p&gt;
&lt;p&gt;やれ起業だ、やれ社長だ、やれ上場だ、とやってきた人が肩で風を切る時代だが、  &lt;/p&gt;
&lt;p&gt;革新性や客観的に賛同可能な思想のないビジネスが、後世になにか残すはずがない。&lt;/p&gt;
&lt;p&gt;「ほんとうにこれぐらいでいいのだろうか」&lt;/p&gt;
&lt;p&gt;「こんなものを世にだしたら恥ずかしくないだろうか」&lt;/p&gt;
&lt;p&gt;「これで誰かを幸せにできるだろうか」&lt;/p&gt;
&lt;p&gt;こうした、「批判を恐れる心」として蔑まれているが、  &lt;/p&gt;
&lt;p&gt;一方で、価値あるものをふるいにかけるフィルタとなる考えが、必要でないだろうか。&lt;br /&gt;
本当に行動力が必要なのは、このフィルタにかけた後である。  &lt;/p&gt;
&lt;p&gt;批判への恐怖から、より賛同可能な方法・考えを練り、自分自身の考えの欠点を修正し、&lt;br /&gt;
その結果、恐れを乗り越えるだけの洗練された案が浮かんでくる。&lt;/p&gt;
&lt;p&gt;「恐れるな」は間違いだ、「恐れなくなるくらい考えろ」が正しい。&lt;br /&gt;
だからこそ、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;行動する前に考えてしまう人。&lt;/li&gt;
&lt;li&gt;物事を複雑に考えてしまう人。&lt;/li&gt;
&lt;li&gt;プライドが高くて、失敗したくない人。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そんな人こそ、行動するに値するのである。&lt;/p&gt;
&lt;p&gt;私たちの世代は子供の頃から、&lt;/p&gt;
&lt;p&gt;「日本人はディスカッションが下手だ」&lt;/p&gt;
&lt;p&gt;「日本人はもっと積極性をもたないと国際社会でやっていけない」&lt;/p&gt;
&lt;p&gt;と教えられてきた。だが、これらの言葉の意味を&lt;/p&gt;
&lt;p&gt;「なんでもかんでも言う方が正しい」&lt;/p&gt;
&lt;p&gt;という意味にとらえてはいけない。ディスカッションの場では、自分自身で  &lt;/p&gt;
&lt;p&gt;「今ここでするべきではない発言」や「調べれば分かる質問」や「他人を傷つける言動」  &lt;/p&gt;
&lt;p&gt;などを抑止する責任がある。それに、実際にその場で発言する必要の無い人間がいることも珍しくはない。ただ、その抑止が働き過ぎると有益な考えまでもが封殺されてしまうことがあるため、「極力」発言しましょう。ということである。  &lt;/p&gt;
&lt;p&gt;これは、裏を返せば、「黙っている人が意外とよい考えを持っている事が多い」ということに違いない。&lt;/p&gt;
&lt;p&gt;一躍時の人となったSteve Jobsの言葉&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Stay hungry,stay foolish.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;は、「バカ」肯定では決して無いはずだ。&lt;/p&gt;
&lt;p&gt;「バカに\&amp;lt;ならないといけない&gt;人」はどんな人か、&lt;/p&gt;
&lt;p&gt;もちろん&lt;/p&gt;
&lt;p&gt;「\&amp;lt;今は&gt;バカではない人」だ。&lt;/p&gt;
&lt;p&gt;悩み、恐れ、考えた人こそ、「あえて」バカになろう。行動しよう。&lt;br /&gt;
そういうメッセージだと思いたい。&lt;/p&gt;
&lt;p&gt;だから、私も、名も無き一個人の自己顕示欲丸出しの「バカ」なブログを書いていこうと思う。&lt;/p&gt;</summary></entry></feed>